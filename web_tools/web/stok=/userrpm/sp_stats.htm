<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
		"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
	<style type="text/css">

	</style>
	<title>SystemState</title>
</head>

<body>
<div class="func-container">
	<div id="report"></div>
	<!--开关部分-->
	<div id="spstat_setting" style="margin-top: 20px">
		<form id="spstat_setting_form">
			<input id="stat_enable" name="stat_enable" />
			<div id="stat_warning"></div>
		</form>
		<button id="submitBtn" type="button"></button>
	</div>
	<!--图表部分-->
	<div id="spstat_chart" style="margin-top: 20px; display: none;">
		<div id="spstat_chart_content" style="height:350px">
			<input id="line_chart_type" name="line_chart_type" />
			<input id="chart_spname" name="chart_spname"/>
			<div id="line_chart" style="width:580px;height:240px"></div>
		</div>
	</div>
	<!--表格部分-->
	<div id="spstat_list" style="margin-top: 20px; display: none;">
		<div id="spstat_list_grid">

		</div>
		<div id="sort_remind"></div>

	</div>

	<div id="spstat_help"></div>
</div>

<script type="text/javascript">
	//<![CDATA[
	try {
		$
	} catch (e) {
		location.href = "/";
	};

	$(document).ready(function (e) {
	// 依据路径渲染导出页面
	if($.su.app.runningModule.name === 'report_sp_stats'){
		//动态加载js库函数
		function loadJs(url, callback){
			var length = url.length;
			function jsReady(){
				length --;

				if(length == -1){
					callback();
				}else{
					var script = document.createElement("script");
					script.type = "text/javascript";
					script.src = url[url.length - length - 1];
					script.onload = jsReady;
					document.getElementsByTagName('head')[0].appendChild(script);
				}
			}
			jsReady();
		}

		//动态加载js
		loadJs(['../web-static/js/libs/html2canvas.min.js',
				'../web-static/js/libs/jspdf.min.js',
				'../web-static/js/libs/SourceHanSansCN-Normal-normal.js',
				'../web-static/js/libs/bluebird.min.js'], function(){
			$("#report").html('<button id="export_pdf">导出pdf</button>');

			Date.prototype.Format = function (fmt) {
				var o = {
					"M+": this.getMonth() + 1, //月份
					"d+": this.getDate(), //日
					"H+": this.getHours(), //小时
					"m+": this.getMinutes(), //分
					"s+": this.getSeconds(), //秒
					"q+": Math.floor((this.getMonth() + 3) / 3), //季度
					"S": this.getMilliseconds() //毫秒
				};
				if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
				for (var k in o)
					if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
				return fmt;
			};

			function percent(value, total) {
				return (Number(value)*100/total).toFixed(2) + '%';
			}

			function percentage(index, data, total, pdf, hintHeight) {
				dataIndex = index;
				if (order === 'up'){ // 如果order === up, 先强制置为down再排序，保证下面的百分比计算正确；之后再修改回正确的order值保证下次排序正常
					order = 'down';
					data.sort(dataSort);
					order = 'up';
				} else {
					data.sort(dataSort);
				}

				var text = index === 'tx_bytes' ? '上行' : '下行';
				var serialNumber = index === 'tx_bytes' ? '2、' : '3、';
				var height = index === 'tx_bytes' ? hintHeight + 20 : hintHeight + 40;

				if (total === 0) {
					pdf.text(40, height, serialNumber + '以上数据中，所有安全策略占用的' + text + '流量均为0');
				} else if (Number(data[0][index]) === total){
					pdf.text(40, height, serialNumber + '以上数据中，占用' + text + '流量较多的安全策略是' + data[0].name + '，占比为100%');
				} else if ((Number(data[0][index]) + Number(data[1][index])) === total) {
					pdf.text(40, height, serialNumber + '以上数据中，占用' + text + '流量较多的安全策略是' + data[0].name + '和' + data[1].name +'，占比为' + percent(data[0][index], total) + '、' + percent(data[1][index], total));
				} else {
					pdf.text(40, height, serialNumber + '以上数据中，占用' + text + '流量较多的安全策略是' + data[0].name + '、' + data[1].name +'和' + data[2].name + '，占比为' + percent(data[0][index], total) + '、' + percent(data[1][index], total) + '、' + percent(data[2][index], total));
				}
			};

			function getImageFromUrl(url, pdf) {
				var img = new Image, data;

				img.onError = function() {
					throw new Error('Cannot load image: "'+url+'"');
				}
				img.onload = function() {
					var canvas = document.createElement('canvas');
					document.body.appendChild(canvas);
					canvas.width = img.width;
					canvas.height = img.height;

					var ctx = canvas.getContext('2d');
					ctx.drawImage(img, 0, 0);
					data = canvas.toDataURL('image/png');
					document.body.removeChild(canvas);

					pdf.addImage(data, 'png', 40, 45, 140, 20);
				}
				img.src = url;
			}

			function setCanvasOpts (width, height, canvas, scale) {
				canvas.width = width * scale; //定义canvas 宽度 * 缩放
				canvas.height = height * scale; //定义canvas高度 *缩放
				canvas.style.width = width * scale + "px";
				canvas.style.height = height * scale + "px";
				canvas.getContext("2d").scale(scale, scale); //获取context,设置scale
				var opts = {
					scale: scale, // 添加的scale 参数
					canvas: canvas, //自定义 canvas
					logging: false, //日志开关，便于查看html2canvas的内部执行流程
					width: width, //dom 原始宽度
					height: height,
					useCORS: true // 【重要】开启跨域配置
				};
				return opts
			}

			$("#export_pdf").on("click", function () {
				// 基础设置
				var chartCvs = document.getElementById('spstat_chart_content'),
					width_form = chartCvs.clientWidth,
					height_form = chartCvs.clientHeight,
					canvas_chart = document.createElement("canvas"), //创建一个canvas节点
					scale = 2; //定义任意放大倍数 支持小数

				var gridCvs = document.getElementsByClassName('grid-container')[0],
					width_grid = gridCvs.clientWidth,
					height_grid = gridCvs.clientHeight,
					canvas_grid = document.createElement("canvas");

				var opts_form = setCanvasOpts(width_form, height_form, canvas_chart, scale);
				var opts_grid = setCanvasOpts(width_grid, height_grid, canvas_grid, scale);

				var pdf = new jsPDF('', 'pt', 'a4'); //方向默认竖直，尺寸points，格式a4[595.28,841.89]
				pdf.setFont('SourceHanSansCN-Normal');

				// 添加首页
				getImageFromUrl('../web-static/themes/old/img/logo.png', pdf);

				pdf.setFillColor(0, 104, 183);
				pdf.rect(0, 165, 360, 60, 'f');
				pdf.setFontSize(36);
				pdf.setTextColor(255, 255, 255);
				pdf.text(40, 210, 'TP-LINK综合报表');

				pdf.setFontSize(16);
				pdf.setTextColor(102, 102, 102);
				var time = new Date().Format("yyyy-MM-dd");
				var hour = new Date().Format("HH:mm:ss");
				pdf.text(40, 260, '生成时间：' + time);
				pdf.text(210, 260, hour); // 强行在天数和小时之间添加空格效果

				// 添加详情页
				html2canvas(chartCvs, opts_form).then(function(canvas_chart){
					pdf.addPage();

					// add title
					pdf.setFillColor(0, 104, 177);
					pdf.rect(40, 40, 100, 26, 'f');
					pdf.setFillColor(153,195,226);
					pdf.rect(140, 40, 415, 26, 'f');
					pdf.setFontSize(12);
					pdf.setTextColor(255, 255, 255);
					pdf.text(55, 57, '流量统计图表');

					//addImage后两个参数控制添加图片的尺寸，此处将页面高度按照a4纸宽高比列进行压缩
					var pageData = canvas_chart.toDataURL('image/jpeg', 1.0);
					var chartHeight = 515/canvas_chart.width * canvas_chart.height;
					pdf.addImage(pageData, 'JPEG', 40, 90, 515, chartHeight );

					var gridTitleHeight = chartHeight + 90 + 20;
					pdf.setFillColor(0, 104, 177);
					pdf.rect(40, gridTitleHeight, 100, 26, 'f');
					pdf.setFillColor(153,195,226);
					pdf.rect(140, gridTitleHeight, 415, 26, 'f');
					pdf.setFontSize(12);
					pdf.setTextColor(255, 255, 255);
					pdf.text(55, gridTitleHeight + 17, '流量统计列表');

					html2canvas(gridCvs, opts_grid).then(function(canvas_grid){

						var gridCanvasStartHeight = gridTitleHeight + 50;
						var contentWidth = canvas_grid.width;
						var contentHeight = canvas_grid.height;

						var pageHeight = contentWidth / 515 * 841.89; // 单页pdf能显示多少的canvas高度
						var leftHeight = contentHeight; // 剩余的canvas高度;
						var titleHeight = contentWidth / 515 * gridCanvasStartHeight; // 计算第一页的pdf 上面其它占据的220高度对应canvas的高度。
						var position = gridCanvasStartHeight - 841.89; // pdf页面偏移量(初始值为添加完带标题页面的值);

						var pageData = canvas_grid.toDataURL('image/jpeg', 1.0);
						var canvasWidth = 515;
						var canvasHeight = 515/contentWidth * contentHeight; // canvas在pdf中实际高度

						//有两个高度需要区分，一个是html页面的实际高度，和生成pdf的页面高度(841.89)
						//当内容未超过pdf一页显示的范围，无需分页
						pdf.addImage(pageData, 'JPEG', 40, gridCanvasStartHeight, canvasWidth, canvasHeight ); // 第一页上方多占据高度值向下偏移
						leftHeight = leftHeight - pageHeight + titleHeight; // 第一页放完之后canvas剩余高度

						while(leftHeight > 0) {
							pdf.addPage();
							pdf.addImage(pageData, 'JPEG', 40, position, canvasWidth, canvasHeight);
							leftHeight -= pageHeight;
							position -= 841.89;
						};

						// add footer, 发送总字节tx_bytes， 接收总字节rx_bytes
						var data = spstat_grid.grid('getStore').data,
							length = data.length;

						if (length > 0) {
							var total_tx_bytes = 0,
								total_rx_bytes = 0;
							var tx = 0,
								rx = 0;
							for (var i = 0; i < length; i++) {
								if(isNaN(tx = Number(data[i].tx_bytes)))
								{
									data[i].tx_bytes = 0;
									tx = 0;
								}
								if(isNaN(rx = Number(data[i].rx_bytes)))
								{
									data[i].rx_bytes = 0;
									rx = 0;
								}
								total_tx_bytes += tx;
								total_rx_bytes += rx;
							}

							pdf.setFontSize(9);
							pdf.setTextColor(153, 153, 153);

							var lastCanvasPageHeight = leftHeight + pageHeight;
							var hintHeight = 515/contentWidth * lastCanvasPageHeight + 20; // 带canvas的最后一页，canvas图像占据pdf多少高度
							if (hintHeight + 60 > 830) { // 如果末尾提示文字占用高度超过一页，则另起一页显示,每页最高841.89，为显示效果考虑，按830判断
								pdf.addPage();
								hintHeight = 40;
							};

							pdf.text(40, hintHeight, '1、在统计时间内，所有安全策略的总上行流量为' + filter(total_tx_bytes) + '，所有安全策略的总下行流量为' + filter(total_rx_bytes) + '。');
							percentage('tx_bytes', data, total_tx_bytes, pdf, hintHeight);
							percentage('rx_bytes', data, total_rx_bytes, pdf, hintHeight);
							pdf.text(40, hintHeight + 60, '4、如果网络带宽不足，可以根据统计结果配置安全策略。');
						};

						pdf.save('安全策略流量报表.pdf');
					});
				});
			});
		});
	}

		var currentChartType = 'tx_bps';
		var selectedSpnames = [];

		var spnameItem=[];
		var allSelectSpname = [];
		var spnameProxy = new $.su.Proxy({});
		var maxY = 10;
		var plotData =[];

		// 获取时间间隔
		var periodProxy = new $.su.Proxy({});
		var stat_period = 5;
		var securityPolicyProxy = new $.su.Proxy({
			async: true,
			authSessionsDataFlag:true
		});
		var proxyFilter = [];
		var chartData = {};
		var statEnable = 'off';

		$('input#line_chart_type').radio({
			fieldLabel: $.su.CHAR.SPSTAT.LINECHARTTYPE,
			columns: 4,
			items:[
				{boxlabel: $.su.CHAR.SPSTAT.TX_BPS, name:'line_chart_type', inputValue:'tx_bps', checked:true},
				{boxlabel: $.su.CHAR.SPSTAT.RX_BPS, name:'line_chart_type', inputValue:'rx_bps'},
				{boxlabel: $.su.CHAR.SPSTAT.TX_PPS, name:'line_chart_type', inputValue:'tx_pps'},
				{boxlabel: $.su.CHAR.SPSTAT.RX_PPS, name:'line_chart_type', inputValue:'rx_pps'}
			]}).on('ev_change', function(e, oldValue, newValue){
			currentChartType = newValue;
			if (statEnable=='on') {
				drawChart();
			}
		});

		function lineChartRefreshHandle(){
			if($.contains(document,$("#line_chart")[0])){
				if(window.lineChartInterval){
					clearTimeout(window.lineChartInterval);
				}
				securityPolicyProxy.query({"security_policy":{"table":"hist_stat_list","filter":proxyFilter}}, function(data){
					chartData = data.security_policy;
					drawChart();
					if(window.lineChartInterval){
						clearTimeout(window.lineChartInterval);
					}
					//刷新周期
					window.lineChartInterval = setTimeout(lineChartRefreshHandle, 10000);
				});
			}
		}

		$('input#chart_spname').combobox({
			fieldLabel: $.su.CHAR.SPSTAT.SP_NAME,
			multiSelect: true,
			items:[{name:"---",value:"---", selected:true}]
		}).on('ev_change', function(e, oldValue, newValue){
			proxyFilter = [];
			selectedSpnames = $('input#chart_spname').combobox("getValue");
			selectedSpnames.forEach(function (item,index) {
				var filterItem = {"name":item};
				proxyFilter.push(filterItem);
			});
			// 立刻触发一次
			if(statEnable == 'on'){
				lineChartRefreshHandle();
			}
		});

		//开关部分
		$("#spstat_setting").panel({
			title: $.su.CHAR.SPSTAT.TITLE,
			collapsible: false
		});

		var statEnableProxy = new $.su.Proxy({});

		var $statEnable = $('input#stat_enable').checkbox({
			fieldLabel: $.su.CHAR.SPSTAT.SETTING_STATUS,
			items:[{boxlabel: "开启", name:'stat_enable', inputValue:'on',uncheckedValue:"off"}]}
		).on('ev_change', function(e, oldValue, newValue){
			statEnable = newValue[0] == "on" ? "on" : "off";
		});

		statEnableProxy.query({"security_policy":{"name":"global"}},function (data) {
			$statEnable.checkbox("setValue",data.security_policy.global.stat_enable);
			statEnable = data.security_policy.global.stat_enable;
			stat_period = parseInt(data.security_policy.global.stat_period) || stat_period;
			changeHtmlByState(statEnable);
		});

		function changeHtmlByState(state){
			if (state == 'on') {
				$('#spstat_list_grid').find('.operation-container').find("input.operation-auto-refresh").checkbox('setValue','true');
				$('#spstat_list_grid').grid('refresh',1);
				$('#spstat_chart').css({'display':'block'});
				$("#spstat_list").css({'display':'block'});
				$("#report").css({'display':'block'});
				lineChartRefreshHandle();
			} else if (state == 'off') {
				if(window.lineChartInterval){
					clearTimeout(window.lineChartInterval);
				}
				$('#spstat_list_grid').find('.operation-container').find("input.operation-auto-refresh").checkbox('setValue','false');
				$('#spstat_chart').css({'display':'none'});
				$("#spstat_list").css({'display':'none'});
				$("#report").css({'display':'none'});
			}
		}

		var spstat_setting_form = $("#spstat_setting_form").form({
			proxy: statEnableProxy,
			fields: [
				{name: "stat_enable", mapping: "stat_enable"}
			],
			parseKey:{
				moduleName: "security_policy",
				sectionName: "global"
			},
			autoLoad:false,
			submitBtn: "#submitBtn"
		});

		$("#submitBtn").button({
			text: "设置",
			cls: "submit",
			handler: function(e){
				$.su.loading.show();
				spstat_setting_form.form("submit", function(){
					$.su.loading.hide();
				} ,function(){
					$.su.loading.hide();
					changeHtmlByState(statEnable);
				},function(){
					$.su.loading.hide();
				});
			}
		});

		//图表部分
		$("#spstat_chart").panel({
			title: $.su.CHAR.SPSTAT.TITLE_CHART,
			collapsible: false
		});
		var $chart = $("#line_chart");

		function drawChart(){
			plotData =[];
			maxY = 0;
			chartData.hist_stat_list.forEach(function (item,index) {
				var dataList =[];
				var itemLabel = '';
				var itemValue = {};
				for(var i in item) {
					itemLabel = i;
					itemValue = item[i];
				}
				itemValue[currentChartType].forEach(function (cItem,cIndex) {
					var dataItem = [cIndex*stat_period,cItem];
					dataList.push(dataItem);
					maxY = maxY > parseInt(cItem) ? maxY : parseInt(cItem);
				});
				maxY = maxY * 1.05 + 10;

				var plotDataItem = {
					label:itemLabel,
					data:dataList
				};
				plotData.push(plotDataItem);
			});
			$.plot($chart,plotData, {
				colors: [
					'#00B6F2',
					'#FF6666',
					'#FFA200',
					'#14CC8F',
					'#1994FF',
					'#CA78FF',
					'#F56200',
					'#1EC05A',
					'#3D79F2',
					'#A88CFF',
					'#EB330E',
					'#CCD400',
					'#305FBC',
					'#C000E6',
					'#FF8000',
					'#A4CF09',
					'#004FFF',
					'#F44DF4',
					'#F0BC00',
					'#1DAE00'
				],
				legend :{
					position: 'nw',
					show: true,
					backgroundOpacity:0,
					labelFormatter:function labelFormatter(label, series) {
						return '<div style="font-size:8pt; text-align:center; padding:2px;color:'+series.color+';">' +label+'</div>';
					}
				},
				xaxis:{
					min: 0,
					max: 60*stat_period,
					tickFormatter: function(axis) {return axis.toString() + "s";}
				},
				yaxis:{
					min: 0,
					max: maxY,
					tickFormatter: function(axis) {
						if (currentChartType === "tx_bps" || currentChartType === "rx_bps")return axis.toString() + "KB/s";
						if (currentChartType === "tx_pps" || currentChartType === "rx_pps")return axis.toString() + "Pkt/s";
						return axis.toString()
					}
				},
				grid:{
					color:"#cccccc"
				}
			});
		}

		//grid 部分
		var clean_proxy = new $.su.Proxy({});
		$("#spstat_list").panel({
			title: $.su.CHAR.SPSTAT.TITLE_LIST,
			collapsible: false
		});

		var order = "down";

		function filter(v){
			if(parseInt(v) >= 1024*1024*1024){
				v = v * 1.0 / (1024*1024*1024);
				return v.toFixed(1) + "G";
			}
			if(parseInt(v) >= 1024*1024){
				v = v * 1.0 / (1024*1024);
				return v.toFixed(1) + "M";
			}
			return v;
		}

		var ifReg = new RegExp(/(eth\d\.?\d{0,})|(ath\d+)|(wifi\d+)|(lo)/);

		var spstatProxy = new $.su.Proxy({async:false});

		var spstat_grid = $("div#spstat_list_grid").grid({
			store:{
				proxy: spstatProxy,
				parseKey: {                 /* 此处在store中增加parseKey，便于store对象在底层对数据进行预处理，以实现SLP数据结构和SU数据结构的转变 */
					moduleName: "security_policy",
					pageSizeName: "sp_stat_entry",
					tableName: "stat_list",
					maxNum:10
				},
				fields: [
					{name: "name"},
					{name: "tx_bps"},
					{name: "rx_bps"},
					{name: "tx_pps"},
					{name: "rx_pps"},
					{name: "tx_bytes"},
					{name: "rx_bytes"},
					{name: "tx_pkts"},
					{name: "rx_pkts"}
				],
				autoLoad: true
			},
			minLines: 0,
			paging_true:{},
			columns: [
				{
					text: $.su.CHAR.SPSTAT.ID,
					xtype: "rownumberer",
					width:70,
					hidden:true
				},
				{
					text: $.su.CHAR.SPSTAT.SP_NAME,
					width:120,
					dataIndex: "name",
					scan: {
						type: "combobox",
						cmp: $.search.compare.stringStrict,
						items: function(){
							return spnameItem;
						}
					}
				},
				{
					text: $.su.CHAR.SPSTAT.TX_BPS,
					width:90,
					dataIndex: "tx_bps"
				},
				{
					text: $.su.CHAR.SPSTAT.RX_BPS,
					width:90,
					dataIndex: "rx_bps"
				},
				{
					text: $.su.CHAR.SPSTAT.TX_PPS,
					width:110,
					dataIndex: "tx_pps"
				},
				{
					text: $.su.CHAR.SPSTAT.RX_PPS,
					width:110,
					dataIndex: "rx_pps"
				},
				{
					text: $.su.CHAR.SPSTAT.TX_BYTES,
					width:80,
					dataIndex: "tx_bytes",
					renderer: function(v){
						if(0 == v){
							return "---";
						}
						return filter(v);
					}
				},
				{
					text: $.su.CHAR.SPSTAT.RX_BYTES,
					width:80,
					dataIndex: "rx_bytes",
					renderer: function(v){
						if(0 == v){
							return "---";
						}
						return filter(v);
					}
				},
				{
					text: $.su.CHAR.SPSTAT.TX_PKTS,
					width:80,
					dataIndex: "tx_pkts",
					renderer: function(v){
						if(0 == v){
							return "---";
						}
						return filter(v);
					}
				},
				{
					text: $.su.CHAR.SPSTAT.RX_PKTS,
					width:80,
					dataIndex: "rx_pkts",
					renderer: function(v){
						if(0 == v){
							return "---";
						}
						return filter(v);
					}
				}
			],
			operation: ["clear","search","refresh","autoRefresh"],
			autoRefresh: true
		}).on("ev_load", function(e,data){
			allSelectSpname = [];
			spnameItem = [];
			data.forEach(function (item,index) {
				spnameItem.push({name:item.name,value:item.itemName});
				allSelectSpname.push(item.itemName);
			});

			// 首次加载、换页等影响可选安全策略列表的行为会改变可选项并且选中所有
			var curItem = $('input#chart_spname').get(0).items.sort();
			var newItem = spnameItem.sort();
			var isSame = false;
			if (curItem.length == newItem.length)
			{
				for (var i = 0; i < curItem.length; i++)
					if (curItem[i].name !== newItem[i].name) break;

				if (i == curItem.length) isSame = true;
			}
			if(!isSame){
				$('input#chart_spname').combobox('loadData',spnameItem);
				$('input#chart_spname').combobox('select',allSelectSpname);
				//清空并且指定新的定时器，直接由输入框的选中值改变触发即可
			}
		}).on("ev_clear", function(e, obj, action){
			clean_proxy.action({"security_policy":{"stat_clean":{}}}, function(data){
				$(spstat_grid.get(0).store).trigger("ev_refresh", []);
			});
		});

		var dataIndex = "tx_bps";
		function dataSort(x, y) {
			if(order == "down"){
				if(dataIndex == "name"){
					if (x[dataIndex] > y[dataIndex]) {
						return -1;
					}else if (x[dataIndex] < y[dataIndex]) {
						return 1;
					}
				}else{
					if (parseInt(x[dataIndex]) > parseInt(y[dataIndex])) {
						return -1;
					}else if (parseInt(x[dataIndex]) < parseInt(y[dataIndex])) {
						return 1;
					}
				}

			}else{
				if(dataIndex == "name"){
					if (x[dataIndex] > y[dataIndex]) {
						return 1;
					}else if (x[dataIndex] < y[dataIndex]) {
						return -1;
					}
				}else{
					if (parseInt(x[dataIndex]) > parseInt(y[dataIndex])) {
						return 1;
					}else if (parseInt(x[dataIndex]) < parseInt(y[dataIndex])) {
						return -1;
					}
				}

			}
		}

		spstat_grid.delegate("th.grid-header-1", "click", function(e){
			var store = spstat_grid.grid("getStore");
			var data = store.data;
			dataIndex = "name";
			store.loadData(data.sort(dataSort));
			if(order == "down"){
				order = "up";
			}else{
				order = "down";
			}
		});
		spstat_grid.delegate("th.grid-header-2", "click", function(e){
			var store = spstat_grid.grid("getStore");
			var data = store.data;
			dataIndex = "tx_bps";
			store.loadData(data.sort(dataSort));
			if(order == "down"){
				order = "up";
			}else{
				order = "down";
			}
		});
		spstat_grid.delegate("th.grid-header-3", "click", function(e){
			var store = spstat_grid.grid("getStore");
			var data = store.data;
			dataIndex = "rx_bps";
			store.loadData(data.sort(dataSort));
			if(order == "down"){
				order = "up";
			}else{
				order = "down";
			}
		});
		spstat_grid.delegate("th.grid-header-4", "click", function(e){
			var store = spstat_grid.grid("getStore");
			var data = store.data;
			dataIndex = "tx_pps";
			store.loadData(data.sort(dataSort));
			if(order == "down"){
				order = "up";
			}else{
				order = "down";
			}
		});
		spstat_grid.delegate("th.grid-header-5", "click", function(e){
			var store = spstat_grid.grid("getStore");
			var data = store.data;
			dataIndex = "rx_pps";
			store.loadData(data.sort(dataSort));
			if(order == "down"){
				order = "up";
			}else{
				order = "down";
			}
		});
		spstat_grid.delegate("th.grid-header-6", "click", function(e){
			var store = spstat_grid.grid("getStore");
			var data = store.data;
			dataIndex = "tx_bytes";
			store.loadData(data.sort(dataSort));
			if(order == "down"){
				order = "up";
			}else{
				order = "down";
			}
		});
		spstat_grid.delegate("th.grid-header-7", "click", function(e){
			var store = spstat_grid.grid("getStore");
			var data = store.data;
			dataIndex = "rx_bytes";
			store.loadData(data.sort(dataSort));
			if(order == "down"){
				order = "up";
			}else{
				order = "down";
			}
		});
		spstat_grid.delegate("th.grid-header-8", "click", function(e){
			var store = spstat_grid.grid("getStore");
			var data = store.data;
			dataIndex = "tx_pkts";
			store.loadData(data.sort(dataSort));
			if(order == "down"){
				order = "up";
			}else{
				order = "down";
			}
		});
		spstat_grid.delegate("th.grid-header-9", "click", function(e){
			var store = spstat_grid.grid("getStore");
			var data = store.data;
			dataIndex = "rx_pkts";
			store.loadData(data.sort(dataSort));
			if(order == "down"){
				order = "up";
			}else{
				order = "down";
			}
		});

		$("th").css({
			"color": "#00E",
			"cursor": "pointer"
		});

		$("#sort_remind").html("<hr/>如需要按指定内容排序，请点击表头切换排序方式。");
		$("#stat_warning").html("<hr/>"+$.su.CHAR.SPSTAT.WARNING);
		$(".grid-panel").css("marginBottom","40px");

		var SPSTAT_help = new $.su.Help({
			container: "div#spstat_help",
			content: ["SPSTAT_GLOBAL","SPSTAT_CHART","SPSTAT_GRID"]
		});
	});
</script>
</body>

</html>
