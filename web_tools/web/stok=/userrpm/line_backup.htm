<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>LINE_BACKUP</title>
<style type="text/css">
</style>
</head>

<body>
<div class="func-container">
    <div id="line_backup_list">
        <div id="line_backup_grid">
        </div>
    </div>
    <div id="line_backup_help">
    </div>
</div>

<script type="text/javascript">
try{
    $
}catch(e){
    location.href = "/";
};

$(document).ready(function(e){
    var existInterface=[];
    var line_backup_Proxy = new $.su.Proxy();

    $("#line_backup_list").panel({
        title: $.su.CHAR.LINE_BACKUP.SETTINGS,
        collapsible: false
    });

    var ruleGrid = $("#line_backup_grid").grid({
        editor: {
            content:"default",
            fields: [
                {name: "master_if"},
                {name: "slave_if"},
                {name: "mode"},
                {name: "timeobj"},
                {name: "state"}
            ],
            validator: function(){
                var $editor = $(ruleGrid.grid('getEditor')),
                    editingId = $editor.editor('getEditingId'),
                    $master = $editor.find('.combobox-value[name=master_if]'),
                    $slave = $editor.find('.combobox-value[name=slave_if]'),
                    value1 = [],
                    value2,
                    isOccupied = false;

                    if(editingId == "add"){
                            value1 = $master.combobox("getValue");
                            $.each(value1, function(i, o){
                                if(-1 != $.inArray(o, existInterface)){
                                    isOccupied = true;
                                    $master.combobox("setError", "接口已被别的主备组占用");
                                    return false;
                                }
                            });

                            if (!isOccupied)
                            {
                                value2 = $slave.combobox("getValue");
                                $.each(value2, function(i, o){
                                    if(-1 != $.inArray(o, existInterface)){
                                        isOccupied = true;
                                        $slave.combobox("setError", "接口已被别的主备组占用");
                                        return false;
                                    }

                                    if(-1 != $.inArray(o, value1)){
                                        isOccupied = true;
                                        $slave.combobox("setError", "主备接口冲突，请重新选择！");
                                        return false;
                                    }
                                });
                            }

                            return !isOccupied;

                        }else
                        {
                            return true;
                        }

            }
        },
        store:{
            proxy: line_backup_Proxy,
            fields: [
                {name: "master_if"},
                {name: "slave_if"},
                {name: "mode"},
                {name: "timeobj"},
                {name: "state"}
            ],
            parseKey: {
                moduleName: "line_backup",
                tableName: "rule"
            },
            autoLoad: true
        },
        paging:[],
        columns: [
            {
                xtype: "checkcolumn"
            },
            {
                xtype: "rownumberer"
            },
            {
                text: $.su.CHAR.LINE_BACKUP.MASTER_INTERFACE,
                width: 120,
                dataIndex: "master_if",
                editor: {
                    xtype: "combobox",
                    allowBlank: false,
                    vtype:"string_visible_allow_blank",
                    items:[
                        {name:"---",value:"---"}
                    ]
                }
            },
            {
                text: $.su.CHAR.LINE_BACKUP.SLAVE_INTERFACE,
                width: 120,
                dataIndex: "slave_if",
                editor: {
                    xtype: "combobox",
                    allowBlank: false,
                    vtype:"string_visible_allow_blank",
                    items:[
                        {name:"---",value:"---"}
                    ]
                }
            },
            {
                text: $.su.CHAR.LINE_BACKUP.MODE,
                width: 100,
                dataIndex: "mode",
                renderer: function(v)
                {
                    if(v == "timer")
                    {
                        return $.su.CHAR.LINE_BACKUP.TIMER_MODE;
                    }
                    else if(v == "fault")
                    {
                        return $.su.CHAR.LINE_BACKUP.FAULT_MODE;
                    }
                    else{
                        return "--";
                    }
                },
                editor: {
                    allowBlank: false,
                    xtype: "radio",
                    columns: 2,
                        items:[
                            {boxlabel: $.su.CHAR.LINE_BACKUP.TIMER_MODE, name:'mode', inputValue:'timer',checked:true},
                            {boxlabel: $.su.CHAR.LINE_BACKUP.FAULT_MODE, name:'mode', inputValue:'fault'}
                        ]
                }
            },
            {
                text: $.su.CHAR.LINE_BACKUP.TIME,
                width: 120,
                dataIndex: "timeobj",
                editor: {
                    xtype: "combobox",
                    allowBlank: false,
                    vtype:"string_visible_allow_blank",
                    items:[
                        {name:"Any",value:"Any",selected:true}
                    ]
                }
            },
            {
                text: $.su.CHAR.LINE_BACKUP.STATUS,
                xtype: "statuscolumn",
                dataIndex: "state",
                editor: {
                    xtype: "checkbox",
                    items:[
                        {boxlabel: $.su.CHAR.LINE_BACKUP.ENABLE_RULE, name:'state', inputValue:'on', uncheckedValue:"off",checked:true}
                    ]
                }
            },
            {
                xtype: "settings"
            }
        ],
        operation: 'prompt|add|delete'
   }).on("ev_load", function(e,data, others){
        if(others)
        {
            //console.log(others.max_rules)
            maxrules = others.max_rules;
        }

        /*发送form请求,获取interface列表.用于显示于接口下拉框*/
        var $editor = $(ruleGrid.grid('getEditor')),
            store = ruleGrid.grid('getStore'),
            interfaceItem=[],
            interfaceProxy = new $.su.Proxy({
                async: false
            });


        existInterface.length = 0;/* 清空数组 */
        $.each(store.data, function(i, o){
            if(o.slave_if){
                existInterface.push(o.slave_if);
            }
            if(o.master_if){
                existInterface = existInterface.concat(o.master_if);
            }
        });
        $.unique(existInterface);

        var bridgeInf = [];
        var interfaceInfoProxy = new $.su.Proxy({async: false});
        interfaceInfoProxy.query({ "network": { "table": "if_info" } }, function (data) {
            var data = data.network["if_info"];
            for (var i = 0; i < data.length; i++) {
                for (intf in data[i]) {
                    if (data[i][intf].isbridged == 1){
                        bridgeInf.push(intf);
                    }
                }
            }
        });

       interfaceProxy.query({ "mwan3": { "table": "if" } }, function (data) {
           var resp_data = data.mwan3["if"];
           for (var i = 0; i < resp_data.length; i++) {
               for (intf in resp_data[i]) {
                   var curr_if = resp_data[i][intf];
                   if (curr_if.balance == 1 && bridgeInf.indexOf(intf) < 0)
                       interfaceItem.push({ name: intf, value: intf });
               }
               var combobox = $editor.find('.combobox-value[name=master_if]');
               combobox.combobox('loadData', interfaceItem);
               var combobox1 = $editor.find('.combobox-value[name=slave_if]');
               combobox1.combobox('loadData', interfaceItem);
           }
       });

        /*发送form请求,获取时间对象列表 */
        var timeItem=[];
        var timeProxy = new $.su.Proxy({
                async: false
        });

        timeProxy.query({ "time_mngt": { "table": "time_obj" } }, function (data) {
            data = data.time_mngt.time_obj;
            for (i = 0; i < data.length; i++) {
                for (var key in data[i]) {
                    timeItem.push({ name: data[i][key].name, value: data[i][key].name });
                }
            }

            var combobox = $editor.find('.combobox-value[name=timeobj]');
            combobox.combobox('loadData', timeItem);
        });
    }).on("ev_insert", function(){
        ruleGrid.grid("getStore").load();}
    ).on("ev_remove", function(){
        ruleGrid.grid("getStore").load();}
    ).on("ev_update", function(){
        ruleGrid.grid("getStore").load();});

    var editor = $(ruleGrid.grid('getEditor'));
    editor.on("ev_startEdit", function(e){
        var modeRadio = $(editor.find(".radio-value[name=mode]"));
        //console.log(modeRadio.radio("getValue"));
        if("fault" == modeRadio.radio("getValue")){
            editor.find(".combobox-value[name=timeobj]").combobox("disable");
        }else{
            editor.find(".combobox-value[name=timeobj]").combobox("enable");
        }
    });

    editor.find(".radio-value[name=mode]").on("ev_change", function(e, oldValue, newValue){
        //console.log(oldValue,newValue)
        if("fault" == newValue){
            editor.find(".combobox-value[name=timeobj]").combobox("disable");
        }else{
            editor.find(".combobox-value[name=timeobj]").combobox("enable");
        }
    });

    var helpLineBackup = new $.su.Help({
        container: "div#line_backup_help",
        content: ["LINE_BACKUP_SETTING"]
    });
});
</script>
</body>

</html>