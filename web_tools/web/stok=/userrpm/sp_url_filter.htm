<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>IMB</title>
<style type="text/css">
</style>
</head>

<body>
	<div class="func-container">

		<div id="rule_list">
			<div id="urlfilter_rule_grid">
			</div>
		</div>

	<div id="own_editor">
		<input id="name" name="name" />
		<input id="radio_url_method" name="allow" />
		<input id="radio_filter_method" name="filter_type" />
		<input id="web_list" name="web_list"/>
		<textarea id="filter_content" name="filter_content" /></textarea>
		<input id="comment" name="comment" />
	</div>

	<div id="link-detail-window">
        <table class="link-detail-table detail">
            <tr>
                <td class="detail-value"></td>
            </tr>
        </table>
    </div>

	<div class="notice"><p id="caution"/></div>
		<div id="urlfilter_help"></div>
	</div>


<script type="text/javascript">
	try{
		$
	}catch(e){
		location.href="../web-static//";
	};

$(document).ready(function(e){
    $(".func-container").hide();

	var enableProxy = new $.su.Proxy({
	});

	var MAX_WEB_PER_RULE = 64;
	var MAX_URL_LENGTH = 256;

	var urlMap=[];
	var urlItem=[];
	var urlProxy = new $.su.Proxy({async: false});
	urlProxy.query({"websort":{"table":"websort_list"}}, function(data){
		for (var i=0; i<data.websort.websort_list.length; i++)
			for (var j in data.websort.websort_list[i])
			{
				urlMap[j] = data.websort.websort_list[i][j].name;
				urlItem.push({name:data.websort.websort_list[i][j].textname,value:j});
				break;
			}
	});

	$("#rule_list").panel({
		title:$.su.CHAR.URLFILTERCONF.RULE_LIST,
		collapsible:false
	});

	var web_list = $('#web_list').combobox({
		fieldLabel: $.su.CHAR.URLFILTERCONF.WEBLIST,
		multiSelect: true,
		items:urlItem
	});

	var fileext = $("#filter_content").textarea({
		fieldLabel: $.su.CHAR.URLFILTERCONF.FILTER_CONTENT,
		tips:"多个过滤内容以换行或者分号隔开",
		//allowBlank: false,
		//vtype:"ascii_visible",
		inputCls:"long",
		setValueCb: function(data){
			var dataString = data.join("\n");
			return dataString;
		},
		getValueCb: function(data){
			var tmp = data.replace(/\s/g,"\n")
			var dataArray = tmp.split(/;|\n/);

			for (var i = 0; i < dataArray.length; i++)
			{
				if (dataArray[i] == "")
				{
					dataArray.splice(i , 1);
					i--;
				}
			}
			//console.log(dataArray);
			return dataArray;
		}
	});

	$("input#radio_url_method").radio({
		fieldLabel:$.su.CHAR.URLFILTERCONF.STRATEGY,
		columns:2,
		items:[
			  {boxlabel:$.su.CHAR.URLFILTERCONF.ACCEPT_URL,name:"allow",inputValue:'accept'},
			  {boxlabel:$.su.CHAR.URLFILTERCONF.FORBIDDEN_URL,name:"allow",inputValue:'drop',checked:true}
		]
	});

	$("input#radio_filter_method").radio({
		fieldLabel:$.su.CHAR.URLFILTERCONF.FILTER_METHOD,
		columns:3,
		items:[
			{boxlabel:$.su.CHAR.URLFILTERCONF.WEBLIST,name:"filter_type",inputValue:"weblist",checked:true},
			{boxlabel:$.su.CHAR.URLFILTERCONF.KEYWORD,name:"filter_type",inputValue:"keyword"},
			{boxlabel:$.su.CHAR.URLFILTERCONF.COMPLETE_URL,name:"filter_type",inputValue:"url"}
		]
	}).on("ev_change", function(e, oldValue, newValue) {
		if(newValue === 'weblist'){
			fileext.textarea('hide');
			fileext.textarea('disable');
			web_list.combobox('show');
			web_list.combobox('enableStyle');
		}else{
			fileext.textarea('show');
			fileext.textarea('enable');
			web_list.combobox('hide');
			web_list.combobox('disableStyle');
		}
	});

	$("input#name").textbox({
		fieldLabel:$.su.CHAR.URLFILTERCONF.NAME,
		tips:"(1-28个字符)",
		allowBlank:false,
		maxLength:28,
		vtype:"name"
	});

	$("input#comment").textbox({
		fieldLabel:$.su.CHAR.URLFILTERCONF.COMMENT,
		tips:"(可选,1-50个字符)",
		allowBlank:true,
		maxLength:50
	});

	var $linkDetail = $("#link-detail-window").msg({
        closeBtn: true,
        cls:"l",
        title: "过滤内容列表",
        type: "window"
    }).msg("hide");

    function showDetail(domain){
 		var domainString = "";
		//var domainArray = domain.split('\n');

		for(var i = 0; i < domain.length; i++){
			if(i == domain.length - 1){
				domainString += domain[i] + "</br>";
			}else{
				domainString += domain[i] + "&nbsp&nbsp&nbsp&nbsp" + domain[i+1] + "</br>";
				i++;
			}

		}
		$linkDetail.find(".detail-value").html(domainString).css({
			"lineHeight":"20px",
			"textAlign":"center",
			"wordBreak":"break-all"
		});
        $linkDetail.msg('show');
    }

    function textSelect(o, a, b){
        var a = parseInt(a, 10), b = parseInt(b, 10);
        if(o.createTextRange){//IE浏览器
            var range = o.createTextRange();
            range.moveStart("character", a);
            range.moveEnd("character",b);
            range.select();
        }else{
            o.setSelectionRange(a, b);
            o.focus();
        }

    }

	function getArrayStrLen(a)
	{
		var strLen = 0;

		if (!$.isArray(a))
		{
			a = [a];
		}

		for (var i = 0; i < a.length; i++)
		{
			strLen += a[i].length + strLen;
		}

		return strLen;
	}

	var ruleListProxy = new $.su.Proxy({
	});

	var ruleGrid = $("#urlfilter_rule_grid").grid({
		maxRulesProperty: "max_rules",
		editor:{
			content:"#own_editor",
			fields:[
				{name:"name"},
				{name:"allow"},
				{name:"filter_type"},
				{name:"filter_content"},
				{name:"web_list"},
				{name:"comment"}
			],
			validator:function(){
				var name=$("#name").textbox('getValue');
                var nameList = $("#urlfilter_rule_grid").grid('getStore').data;
                var editingId = $($("#urlfilter_rule_grid").grid('getEditor')).editor("getEditingId");
                var modify_flag = 0;
                for(var i=0;i<nameList.length;i++){
                    if(editingId == nameList[i].key)
                    {
                        modify_flag = 1;
                        continue;
                    }

                    if(name == nameList[i].name)
                    {
                        $("#name").textbox("setError", "您输入的名称已经存在，请重新输入")
                        return false;
                    }
                }

				var filter_type = $("#radio_filter_method").radio('getValue');
				if (filter_type == "url" ||  filter_type == "keyword"){

					var extList = fileext.textarea("getValue");
	                if("" == extList[0]){
	                    fileext.textarea("setError", "请您输入过滤内容");
	                    $("div.textarea-container").find("div.widget-error-tips").css("margin-top", "200px");
	                    return false;
	                }
					var tmp = extList.join("\n")
	                if(tmp.length > MAX_URL_LENGTH * MAX_WEB_PER_RULE){
	                	fileext.textarea("setError", "输入的字符总长度超过限制");
	                    $("div.textarea-container").find("div.widget-error-tips").css("margin-top", "200px");
	                    return false;
	                }
	                var errBegin = -1;
	                var errEnd = -1;
	                var reg =  new RegExp(/^[\x21-\x7e]{1,}$/);
	                var isValid = true;
	                var tmpExt = [];
	                var errString = "";
	                $(extList).each(function(i, obj){
	                    if(obj == ""){
	                        extList.splice(i,1);
	                        return;
	                    }
	                    if(obj.toString().length > MAX_URL_LENGTH){
	                    	isValid = false;
	                    	errBegin = getArrayStrLen(tmpExt);
	                        errEnd = errBegin + obj.length + 1;
	                    	errString = "输入的每个关键字或者URL长度超过限制";
	                    	return;
	                    }
	                    if(!reg.test(obj)){
	                        isValid = false;
	                        errBegin = getArrayStrLen(tmpExt);
	                        errEnd = errBegin + obj.length + 1;
	                        errString = "输入的关键字或者URL格式不正确";
	                        return;
	                    }
	                    //tmpExt = tmpExt + obj + "\n";
						tmpExt.push(obj);
	                });

	                //tmpExt = tmpExt.match(/(.*[\n]){0,}.*[^\n]/);
	                //console.log(tmpExt)
	                if(extList.length > MAX_WEB_PER_RULE){
						fileext.textarea("setError", "输入的关键字或者URL超过上限，最多支持"+MAX_WEB_PER_RULE+"个关键字或者URL");
						$("div.textarea-container").find("div.widget-error-tips").css("margin-top", "210px");
						isValid = false;
						return false;
					}
					if(extList.length == 0){
						fileext.textarea("setError", "输入内容不能为空");
						$("div.textarea-container").find("div.widget-error-tips").css("margin-top", "210px");
						isValid = false;
						return false;
					}

	                if(isValid){
	                    fileext.textarea("setValue",tmpExt);
	                }else{
	                	textSelect($("textarea").get(0), errBegin, errEnd);
	                    fileext.textarea("setError", errString);
	                    $("div.textarea-container").find("div.widget-error-tips").css("margin-top", "200px");
	                    return false;
	                }
				}

				var nameList = $("#urlfilter_rule_grid").grid('getStore').data;
				var editingId = $($("#urlfilter_rule_grid").grid('getEditor')).editor("getEditingId");

				return true;

			},
			transParams: function(params){
				for (var name in params)
				{
					if (name == "filter_content")
					{
						params[name] = $("textarea#filter_content").textarea("getValue");
					}
				}
				return params;
			}
		},
		store:{
			proxy:ruleListProxy,
			fields:[
				{name:"name"},
				{name:"allow"},
				{name:"filter_type"},
				{name:"filter_content"},
				{name:"web_list"},
				{name:"comment"}
			],
			parseKey: {					/* 此处在store中增加parseKey，便于store对象在底层对数据进行预处理，以实现SLP数据结构和SU数据结构的转变 */
				moduleName:"sec_content_conf",		/* 此处的moduleName和tableName分别指数据块名和对应请求的table名 */
				pageSizeName: "url_filter_conf_entry",
				tableName:"url_filter_conf"
			},
			autoLoad:false,
			isAppointIndex: true,
			appointIndex: 0
		},
		paging_true:{
			insertTofirst: true
		},
		columns:[
			{
				xtype: "checkcolumn"
			},
			{
				xtype: "rownumberer"
			},
			{
				text:$.su.CHAR.URLFILTERCONF.NAME,
				width:100,
				dataIndex:"name"
			},
			{
				text:$.su.CHAR.URLFILTERCONF.STRATEGY,
				width:60,
				dataIndex:"allow",
				renderer:function(val){
					if(val == "accept")
					{
						return $.su.CHAR.URLFILTERCONF.ACCEPT;
					}
					else{
						return $.su.CHAR.URLFILTERCONF.FORBIDDEN;
					}
				}
			},
			{
				text:$.su.CHAR.URLFILTERCONF.FILTER_METHOD,
				width:60,
				dataIndex:"filter_type",
				renderer:function(val){
					if(val=="keyword"){
						return $.su.CHAR.URLFILTERCONF.KEYWORD;
					}else if (val=="url")
					{
						return $.su.CHAR.URLFILTERCONF.COMPLETE_URL;
					}else if (val=="weblist")
					{
						return $.su.CHAR.URLFILTERCONF.WEBLIST;
					}
				}
			},
			{
				text:$.su.CHAR.URLFILTERCONF.FILTER_CONTENT,
				width:120,
				dataIndex:"filter_content",
				renderer:function(dd, index, data){
					if (data.filter_type != "url" && data.filter_type != "keyword"){
						return "---";
					}
					if("" == dd || typeof dd == "undefined"){
						return "---";
					}
					var URL = dd;

					switch(URL.length){
						case 0:
							return "---";
							break;
						case 1:
							return URL[0];
							break;
						case 2:
							return URL[0] + "</br>" + URL[1];
							break;
						default:
							return URL[0] + "&nbsp&nbsp" + "<a href='javascript:void(0);' class='btn-detail' data-index='"+ index +"'>更多</a>";
							break;
					}

					return data;
				}
			},
			{
				text: "网站过滤列表",
				width:60,
				dataIndex:"web_list",
				renderer:function(dd,index,data){
					if (data.filter_type != "weblist"){
						return "---";
					}
					if("" == dd || typeof dd == "undefined"){
						return "---";
					}
					var website = [];
					var ddFormat = [];
					if (typeof(dd) == "string") {
						ddFormat.push(dd);
					} else {
						ddFormat = dd;
					}
					$(urlItem).each(function(i, obj){
						$(ddFormat).each(function(j, qbj){
							if(obj.value == qbj){
								website.push(unescape(obj.name));
							}
						});
					});
					return website;
				}
			},
			{
				xtype:"comment",
				dataIndex:"comment"
			},
			{
				xtype: "settings"
			}
		],
		operation:"prompt|add|delete"
	}).delegate('a.btn-detail', 'click', function(e){
        var index = $(this).data('index');
        showDetail(ruleGrid.grid("getStore").data[index].filter_content);
    }).on("ev_formatAddData", function(e, data){
		if (typeof(data.web_list) == "string"){
			data.web_list = [data.web_list];
		}
		}).on("ev_formatEditData", function(e, data){
			if (typeof(data.web_list) == "string"){
				data.web_list = [data.web_list];
			}else if(typeof(data.web_list) == "undefined"){
				data.web_list = [];
			}
	});


	var urlFilterEditor = $(ruleGrid.grid('getEditor'));
	urlFilterEditor.on('ev_startEdit', function(e, index, key){
		if(index == 'add'){
			$('#filter_content').textarea('hide');
			$('#filter_content').textarea('disable');
		}else{
			var store = ruleGrid.grid("getStore");
			var data = store.getData(key);
			$("#radio_filter_method").radio('setValue',data.filter_type);
			if(data.filter_type === 'weblist'){
				fileext.textarea('hide');
				fileext.textarea('disable');
				web_list.combobox('show');
				web_list.combobox('enableStyle');
			}else {
				fileext.textarea('show');
				fileext.textarea('enable');
				web_list.combobox('hide');
				web_list.combobox('disableStyle');
			}
		}
	});

	function web_init()
	{
		$('div#rule_list').show();
		ruleGrid.grid("getStore").load();
	}
	web_init();

	var helpImb = new $.su.Help({
        container: "div#urlfilter_help",
        content: ["URLFILTER_CONF"]
    });
    $(".func-container").show();
});
</script>
</body>
</html>