<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>ROUTING</title>
</head>

<body>
<div class="func-container">


	 <div id="staticRoute">
	 	<div id="staticRouteGrid">

		</div>
		<div id="add_staticRoute">
		    <input id="route_name" name="name"/>
			<input id="route_target" name="target"/>
			<input id="route_netmask" name="netmask"/>
			<input id="route_gateway" name="gateway"/>
			<input id="route_if" name="if"/>
			<input id="route_metric" name="metric"/>
			<input id="route_note" name="note"/>
			<input id="route_enable" name="enable"/>
		</div>
	 </div>



	 <div id="advanced_routing_help"></div>
</div>

<script type="text/javascript">
try{
    $
}catch(e){
    location.href = "/";
};

function logicAnd(int_a,int_b)
{
	var binary_a = parseInt(int_a,10).toString(2);
	var binary_b = parseInt(int_b,10).toString(2);
	var len = (binary_a.length < binary_b.length) ? binary_a.length : binary_b.length;

	if (len != 32)
	{
		return int_a&int_b;
	}

	var cut = Math.abs(binary_a.length - binary_b.length);
	var temp = '';

	for (var i = 0 ; i < cut; i++)
	{
		temp = temp + '0';
	}

	if (binary_a.length > binary_b.length)
	{
		binary_b = temp + binary_b;
	}
	else
	{
		binary_a = temp + binary_a;
	}
	var res = 0;
	for (var i=len-1; i >= 0; i--)
	{
		if (binary_a.charAt(i)&binary_b.charAt(i) == 1)
		{
			if((len-1-i) >24)
			{
				res = Number(res) + 256*Number((1<<(len-9-i)));
			}
			else
			{
				res = Number(res) + Number((1<<(len-1-i)));
			}
		}
	}
	return res;
}
$(document).ready(function(e){
	$(".func-container").hide();

	var interfaceProxy = new $.su.Proxy({async: false});
	var staticRouteProxy = new $.su.Proxy();

	$("div.func-container").page({
		title: $.su.CHAR.ROUTING.STATIC_ROUTING,
		help: ""	//可能是个调用的id 也可能是个url
	});



	$("div#staticRoute").panel({
		title: $.su.CHAR.ROUTING.STATIC_ROUTING,
		collapsible: false
	});


	$("div#systemRoute").panel({
		title: $.su.CHAR.ROUTING.SYSTEM_ROUTING_TABLE,
		collapsible: false
	});

	$("input#route_name").textbox({
		fieldLabel: $.su.CHAR.ROUTING.NAME,
		labelCls: 's',
		maxLength: 32,
		allowBlank: false,
		vtype: 'string_visible_allow_blank'
	});

	$("input#route_target").textbox({
		fieldLabel: $.su.CHAR.ROUTING.DESTINATION_NETWORK,
		labelCls: 's',
		textFormat: $.su.format.ip,
		allowBlank: false,
		vtype: {
            vtype: "ip",
            allowAllZeroFlag: true
        }
	});

	$("input#route_netmask").textbox({
		fieldLabel: $.su.CHAR.ROUTING.SUBNET_MASK,
		labelCls: 's',
		allowBlank: false,
        vtype: {
            vtype: "netmask",
            allowAllOneFlag: true,
            allowAllZeroFlag: true
        }
	});

	$("input#route_gateway").textbox({
		fieldLabel: $.su.CHAR.ROUTING.DEFAULT_GATEWAY,
		labelCls: 's',
		textFormat: $.su.format.ip,
		allowBlank: false,
        vtype: {
            vtype: "ip",
            allowAllZeroFlag: true
        }
	});

	$("input#route_if").combobox({
		fieldLabel: $.su.CHAR.ROUTING.INTERFACE,
		labelCls: 's',
		allowBlank: false,
		items: [
			{name:"---",value:'---'}
		]
	});

	$("input#route_metric").textbox({
		fieldLabel: $.su.CHAR.ROUTING.METRIC,
		tips: $.su.CHAR.ROUTING.METRIC_NOTE,
		defaultValue: 0,
		allowBlank: false,
		labelCls: 's',
        vtype: {
            vtype: "number",
            max: 15,
            min: 0
        }
	});

	$("input#route_note").textbox({
		fieldLabel: $.su.CHAR.ROUTING.DESCRIPTION,
		tips: $.su.CHAR.ROUTING.OPTIONAL,
		defaultValue: " ",
		labelCls: 's',
		maxLength: 50,
		allowBlank: true,
		vtype: 'string_visible_allow_blank'
	});

	$("input#route_reachability").textbox({
		fieldLabel: $.su.CHAR.ROUTING.REACHABILITY,
		labelCls: 's',
		maxLength: 32,
		allowBlank: false,
		vtype: 'string_visible_allow_blank'
	});

	$("input#route_enable").checkbox({
		fieldLabel: $.su.CHAR.ROUTING.ROUTE_ENABLE,
		labelCls: 's',
		items: [
			{boxlabel: $.su.CHAR.ROUTING.ENABLE, inputValue:'on', uncheckedValue:'off',checked:true}
		]
	});

	var staticRouteGrid =$("div#staticRouteGrid").grid({
		store:{
			proxy: staticRouteProxy,
			fields: [
			    {name: "name"},
				{name: "target"},
				{name: "netmask"},
				{name: "gateway"},
				{name: "if"},
				{name: "metric"},
				{name: "note"},
				{name: "reachability"},
				{name: "enable"}
			],
			parseKey: {
				moduleName:"network",
				tableName:"user_route",
				pageSizeName: "static_route_entry",
				maxSizeTableName: "static_routing",
				maxSizeOptionName: "rule_max"
			},
			autoLoad: true
		},
		minLines: 0,
		editor: {
			content: "#add_staticRoute",
			fields: [
				{name: "name"},
				{name: "target"},
				{name: "netmask"},
				{name: "gateway"},
				{name: "if"},
				{name: "metric"},
				{name: "note"},
				{name: "reachability"},
				{name: "enable"}
			],
			validator: function(){

				var editor  = $(staticRouteGrid.grid("getEditor"));
				var target  = editor.find("[name=target]").textbox("getValue");
				var netmask  = editor.find("[name=netmask]").textbox("getValue");

				//console.log(target);
				//console.log(netmask);

				var ip_sample_x = logicAnd($.su.func.ipToInt(target),$.su.func.ipToInt(netmask));
				var calTarget   = $.su.func.intToIp(ip_sample_x);

				editor.find("[name=target]").textbox("setValue",calTarget);
				return true;
			}
		},
		paging_true:{},
		columns: [
			{
				xtype: "checkcolumn",
				width: 25
			},
			{
				text: $.su.CHAR.GRID.ID,
				xtype: "rownumberer",
				width: 25
			},
			{
				text: $.su.CHAR.ROUTING.NAME,
				width:70,
				dataIndex: "name",
				scan: {
					type: "textbox",
					cmp: $.search.compare.string
				}
			},
			{
				text: $.su.CHAR.ROUTING.DESTINATION_NETWORK,
				width:80,
				dataIndex: "target",
				scan: {
					type: "textbox",
					cmp: $.search.compare.string
				}
			},
			{
				text: $.su.CHAR.ROUTING.SUBNET_MASK,
				width:80,
				dataIndex: "netmask",
				scan: {
					type: "textbox",
					cmp: $.search.compare.string
				}
			},
			{
				text: $.su.CHAR.ROUTING.DEFAULT_GATEWAY,
				width:80,
				dataIndex: "gateway",
				scan: {
					type: "textbox",
					cmp: $.search.compare.string
				}
			},
			{
			    text: $.su.CHAR.ROUTING.INTERFACE,
			 	width:70,
			 	dataIndex: "if",
			 	scan: {
					type: "combobox",
					cmp: $.search.compare.stringStrict,
					items: function(){
						var interfaceItem=[];
						interfaceProxy.query({"network":{"table": "if"}}, function(data){
							var data = data.network["if"];
				            for (var i = 0; i < data.length; i++)
				            {
				                for (var key in data[i])
								{
									interfaceItem.push({name:data[i][key].if_name,value:data[i][key].if_name});
								}
				            }
						});
						return interfaceItem;
					}
				}
		    },
			{
			    text: $.su.CHAR.ROUTING.METRIC,
			 	width:40,
			 	dataIndex: "metric",
			 	scan: {
					cmp: $.search.compare.num,
					type: "textbox"
				}
		    },
			{
				text: $.su.CHAR.ROUTING.DESCRIPTION,
				width:5,
				hidden:true,
				dataIndex: "note",
				xtype:"comment"
			},
			{
				text: $.su.CHAR.ROUTING.REACHABILITY,
				width:40,
				dataIndex: "reachability",
				renderer: function(v)
                {
                	if(v == "on")
                	{
                		return $.su.CHAR.ROUTING.REACH;
                	}
                	else
                	{
                		return $.su.CHAR.ROUTING.NONREACH;
                	}
                },
                scan: {
                	cmp: $.search.compare.string,
                	type: "combobox",
                	items:[
						{value:"on", name: $.su.CHAR.ROUTING.REACH},
						{value:"off", name: $.su.CHAR.ROUTING.NONREACH}
					]
                }
			},
			{
				text: $.su.CHAR.GRID.STATUS,
				width:60,
				dataIndex: "enable",
				xtype: "statuscolumn"
			},
			{
				xtype: "settings",
				width:60
			}
		],
		operation: "prompt|enable|disable|add|delete|search"
	}).on("ev_load", function(e,data, others){
        if(others)/* 通过json里的others参数传递动态阀值 */
        {
            maxrules = others.max_rules;
            //console.log(maxIpMask);
        }

		/*获取接口列表*/
		var interfaceItem=[];
		interfaceProxy.query({"network":{"table": "if_info"}}, function(data){
            data = data.network["if_info"];
            for (var i = 0; i < data.length; i++){
                for (var key in data[i]){
                	if(data[i][key].isbridged != 1){
						interfaceItem.push({name:data[i][key].if_name,value:data[i][key].if_name});
					}
				}
            }

            var editor = $("div#staticRouteGrid").grid('getEditor');
			var combobox = $(editor).find('.combobox-value[name=if]');
			combobox.combobox('loadData',interfaceItem);
        });
	}).on("ev_operation", function(e, obj, action){
		var selectedKeys = staticRouteGrid.grid("getSelected");
		var store = staticRouteGrid.grid('getStore');
		var data_len = store.data.length;
		var data = store.data;
		var map = {};
		var data_key = [];
		

		if (0 === selectedKeys.length) {
			staticRouteGrid.get(0).noneSelectMsg_g.msg('show');
		} else {
			staticRouteGrid.grid("runProgress");
			$.su.loading.show();

			if (!$.isArray(selectedKeys)) {
				selectedKeys = [selectedKeys];
			}
			if (!$.isArray(data)) {
				data = [data];
			}

			
			for (var i = 0; i < data.length; i++) {
				map[data[i].key] = data[i].itemName.toString();
			}
			for (var i = 0; i < selectedKeys.length; i++) {
				one_item = {};
				one_item["key"] = map[selectedKeys[i]];
				data_key.push(one_item);
			}

			var postData = {}
			postData["network"] = {};
			postData["network"]["table"] = "user_route";
			postData["network"]["filter"] = {};
			postData["network"]["filter"] = data_key;
			postData["network"]["para"] = {};
			postData["network"]["para"]["enable"] = (action == "enable" ? "on" : "off");

			staticRouteProxy.modify(postData, function(){
				refreshCurrentPage();
				staticRouteGrid.grid("prompt", true);
				setTimeout(function(){//延时时间根据各模块情况自行调整
					$.su.loading.hide();
				}, data_len*1);
			}, function(){
				$.su.loading.hide();
				staticRouteGrid.grid("disGridChkbox");
				staticRouteGrid.grid("prompt", false, "");
			});
		}
	}).on("ev_update", function(e, key, index, data) {
		refreshCurrentPage();
	}).on("ev_statusChange", function(e) {
		refreshCurrentPage();
	});

	function refreshCurrentPage() {
		// 等一秒再获取可达性等数据
		// 防止请求的时候操作还没有执行完
		setTimeout(function() {
			staticRouteGrid.grid("refresh");
		}, 1000);
	}

	var helpAdvancedRouting = new $.su.Help({
		container: "div#advanced_routing_help",
		content: ["ADVANCED_ROUTING_STATIC_ROUTING"]
	});
	$(".func-container").show();
});
</script>
</body>

</html>