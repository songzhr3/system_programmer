<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>L2TP Client</title>
<style type="text/css">
</style>
</head>

<body>
<div class="func-container">
    <div id="func-setting">
        <form id="l2tp-func-settings">
            <input id="hello-interval" name="l2tphellointerval" value=""/>
            <input id="ehco-interval" name="lcpechointerval" value=""/>
        </form>
    </div>

    <div id="l2tp-client-list">
        <div id="l2tp-client-grid">
        </div>
    </div>

    <div id="delete_alert_cnt">
        <div id="delete_pro_cnt" class="reboot-loading-msg">
            <input id="delete_pro_bar" type="text" />
        </div>
    </div>

    <div id = "own_editor">
        <input id = "tunnelname" name = "tunnelname" >
        <input id = "username" name = "username" >
        <input id = "password" name = "password" >
        <input id = "outif" name = "outif" >
        <input id = "server_ip" name = "server_ip" >
        <input id = "ipsecenc" name = "ipsecenc" >
        <input id = "presharekey" name = "presharekey" >
        <input id = "remotesubnet" name = "remotesubnet" >
        <input id = "uplink_bandwidth" name = "uplink_bandwidth" >
        <input id = "downlink_bandwidth" name = "downlink_bandwidth" >
        <input id = "workmode" name = "workmode" >
        <input id = "enable" name = "enable" >
    </div>

    <div id="l2tp-client-help"></div>
</div>

<script type="text/javascript">
try{
    $
}catch(e){
    location.href = "/";
};

/**
 *function name:maskIntToMaskAddr(intMask)
 * describe:convert the mask from int to addr
 */
function maskIntToMaskAddr(intMask)
{
    var maskAddr = "";
    if(parseInt(intMask,10) < 0 || parseInt(intMask,10) > 32)
    {
        return maskAddr;
    }

    var maskNum = parseInt(intMask,10)/8;
    var i = 0;

    for(;i<=(maskNum-1);i++)
    {
        if(i != 0) maskAddr += ".";
        maskAddr += "255";
    }

    if(maskNum < 4)
    {
        var maskTmp = parseInt(intMask,10)%8;
        maskTmp = (255 << (8-maskTmp)) & 255;
        if( maskNum >= 1 )maskAddr += ".";
        maskAddr += maskTmp.toString();

        for(i = maskNum+1 ; i<4 ; i++)
        {
            if(i!=0)maskAddr += ".";
            maskAddr += "0";
        }
    }

    return maskAddr;
}
/**
 *function name:logicAnd(intNuma,intNumb)
 * describe:do the logic and between two int number
 */
function logicAnd(intNuma,intNumb)
{
    var binaryNuma = parseInt(intNuma,10).toString(2);
    var binaryNumb = parseInt(intNumb,10).toString(2);
    var len = (binaryNuma.length < binaryNumb.length) ? binaryNuma.length : binaryNumb.length;

    if (len != 32)
    {
        return intNuma&intNumb;
    }
    var cut = Math.abs(binaryNuma.length - binaryNumb.length);
    var temp = '';

    for (var i = 0 ; i < cut; i++)
    {
        temp = temp + '0';
    }

    if (binaryNuma.length > binaryNumb.length)
    {
        binaryNumb = temp + binaryNumb;
    }
    else
    {
        binaryNuma = temp + binaryNuma;
    }
    var res = 0;
    for (var i=len-1; i >= 0; i--)
    {
        if (binaryNuma.charAt(i)&binaryNumb.charAt(i) == 1)
        {
            if((len-1-i) >24)
            {
                res = Number(res) + 256*Number((1<<(len-9-i)));
            }
            else
            {
                res = Number(res) + Number((1<<(len-1-i)));
            }
        }
    }
    return res;
}

$(document).ready(function(e){
    var interfaceItem = [];
    var firstload = true;
    var l2tpinterface = [];

    /*for IE8*/
    if (!Array.prototype.indexOf)
    {
      Array.prototype.indexOf = function(elt /*, from*/)
      {
        var len = this.length >>> 0;
        var from = Number(arguments[1]) || 0;
        from = (from < 0)
             ? Math.ceil(from)
             : Math.floor(from);
        if (from < 0)
          from += len;

        for (; from < len; from++)
        {
          if (from in this &&
              this[from] === elt)
            return from;
        }
        return -1;
      };
    }

    $("#func-setting").panel({
        title: $.su.CHAR.L2TP_CLIENT.PANEL_GLOBAL,
        collapsible: false
    });

    $("#ehco-interval").textbox({
        fieldLabel: $.su.CHAR.L2TP_CLIENT.HELLO_INTERVAL,
        allowBlank: false,
        tips: $.su.CHAR.L2TP_CLIENT.HELLO_INTERVAL_TIPS,
        validator: function(v){
            return (new $.su.vtype({vtype: "number", min: 0, max: 120}).validate(v));
        }
    });
    $("#hello-interval").textbox({
        fieldLabel: $.su.CHAR.L2TP_CLIENT.ECHO_INTERVAL,
        allowBlank: false,
        tips: $.su.CHAR.L2TP_CLIENT.ECHO_INTERVAL_TIPS,
        validator: function(v){
            return (new $.su.vtype({vtype: "number", min: 60, max: 1000}).validate(v));
        }
    });

    $("#l2tp-func-settings").form({
        proxy: new $.su.Proxy({}),
        fields: [
            {name: "lcpechointerval", mapping: "lcpechointerval"},
            {name: "l2tphellointerval", mapping: "l2tphellointerval"}
        ],
		parseKey:{
			moduleName: "vpn",
			sectionName: "l2tp_client_global"
		},
        submitBtn: "default"
    });

	$("#l2tp-client-list").panel({
		title: $.su.CHAR.L2TP_CLIENT.PANEL_LIST,
		collapsible: false
	});

    /* --the fields of the own_editor begin-- */
    $('#tunnelname').textbox({
        fieldLabel: $.su.CHAR.L2TP_CLIENT.TUNNELNAME,
        allowBlank: false,
        maxLength: 12,
        vtype:"name",
        tips: $.su.CHAR.INTERFACE.IFNAMETIPS,
        validator: function(v)
        {
            if(new $.su.vtype({vtype:'name'}).validate(v) !== true)
            {
                return $.su.CHAR.VPN_COMMON.WRONG_TUNNELNAME_FORMAT;
            }

            if (v.length > 12)
            {
                return $.su.CHAR.L2TP_CLIENT.WRONG_NAME_LENGTH;
            }
            var reg = new RegExp(/^\d/);
            if(reg.test(v)){
                return $.su.CHAR.PPTP_CLIENT_SETTING.NO_NUM_BEGIN;
            }
            return true;
        }
    });

    $('#username').textbox({
        fieldLabel: $.su.CHAR.L2TP_CLIENT.USERNAME,
        allowBlank: false,
        maxLength: 64,
        validator: function(v)
        {
            if(new $.su.vtype({vtype:'string_visible_username'}).validate(v) !== true)
            {
                return $.su.CHAR.VPN_COMMON.WRONG_USERNAME_FORMAT;
            }
            if (v.indexOf(" ") >= 0  || v.indexOf("\\") >= 0)
            {
                return $.su.CHAR.VPN_COMMON.WRONG_USERNAME_FORMAT;
            }
            if (v.length > 64)
            {
                return $.su.CHAR.VPN_COMMON.WRONG_LENGTH;
            }
            return true;
        }
    });

    $('#password').password({
        fieldLabel: $.su.CHAR.L2TP_CLIENT.PASSWORD,
        allowBlank: false,
        maxLength: 128,
        validator: function(v)
        {
            if(new $.su.vtype({vtype:'password'}).validate(v) !== true)
            {
                return $.su.CHAR.VPN_COMMON.WRONG_PASSWORD_FORMAT;
            }
            if (v.indexOf(" ") >= 0)
            {
                return $.su.CHAR.VPN_COMMON.WRONG_PASSWORD_FORMAT;
            }
            if (v.length > 128)
            {
                return $.su.CHAR.VPN_COMMON.WRONG_LENGTH;
            }
            return true;
        }
    });

    $('#outif').combobox({
        fieldLabel:$.su.CHAR.L2TP_CLIENT.OUTIF,
        allowBlank: false,
        vtype:"string_visible_allow_blank",
        items:[
            {value:"WAN1", name: "WAN1"},
            {value:"LAN2", name: "LAN2"}
        ]
    });

    $('#server_ip').textbox({
        fieldLabel: $.su.CHAR.L2TP_CLIENT.LNS,
        allowBlank: false,
        vtype:"ip_domain",
		validator:function(v){
			//fix bug229914, filter invalid ip, 127.0.0.1/224.0.0.1/255.255.255.255
			var str_regex = /^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$/;
			if (true == str_regex.test(v)) {
				return new $.su.vtype('ip').validate(v);
			}
			return true;
		}
    });

    $('#ipsecenc').combobox({
        fieldLabel:$.su.CHAR.L2TP_CLIENT.IPSEC_ENC,
		allowBlank: false,
        items:[
            {value:"yes", name: $.su.CHAR.L2TP_CLIENT.IPSEC_ENC_YES},
            {value:"no", name: $.su.CHAR.L2TP_CLIENT.IPSEC_ENC_NO }
            /*{value:"auto", name: $.su.CHAR.L2TP_CLIENT.IPSEC_ENC_AUTO}*/
        ]
    }).on("ev_change", function(e, oldValue, newValue){
        var value = newValue[0];
        if(value == 'no'){
            $.su.func.hideWidgets($('#presharekey'));
        }else if(value == 'yes')
        {
            $.su.func.showWidgets($('#presharekey'));
        }
    });

    $("#presharekey").textbox({
        fieldLabel:  $.su.CHAR.L2TP_CLIENT.PRESHARE_KEY,
        //labelCls: 'l',
        inputCls:"xl",
        allowBlank:false,
        tips:  $.su.CHAR.IPSEC_SETTING.PSK_TIPS,
        vtype: "string_visible_allow_blank",
        maxLength: 128,
        minLength: 1,
        autoTrim:false
    });

    $('#remotesubnet').subnet({
        fieldLabel: $.su.CHAR.L2TP_CLIENT.REMOTE_SUBNET,
        allowBlank: false
    });

    $('#uplink_bandwidth').textbox({
        fieldLabel: $.su.CHAR.INTERFACE.UPLINK,
        allowBlank: false,
        value: "1000000",
        tips: "Kbps（100-1000000）",
        vtype: {
            vtype: "number",
            max: 1000000,
            min: 100
        }
    });

    $('#downlink_bandwidth').textbox({
        fieldLabel: $.su.CHAR.INTERFACE.DOWNLINK,
        allowBlank: false,
        value: "1000000",
        tips: "Kbps（100-1000000）",
        vtype: {
            vtype: "number",
            max: 1000000,
            min: 100
        }
    });

    $('#workmode').radio({
        fieldLabel:$.su.CHAR.L2TP_CLIENT.WORK_MODE,
        columns: 2,
        items:[
            {inputValue:"nat", boxlabel: $.su.CHAR.L2TP_CLIENT.WORK_MODE_NAT, checked: true},
            {inputValue:"route", boxlabel: $.su.CHAR.L2TP_CLIENT.WORK_MODE_ROUTE }
        ]
    });

    /*$('#enable').radio({
        fieldLabel:$.su.CHAR.POLICY_ROUTE.STATUS,
        columns: 2,
        items:[
            {boxlabel: "启用", name:'enable', inputValue:'on',checked:true},
            {boxlabel: "禁用", name:'enable', inputValue:'off'}
        ]
    });*/

    $('#enable').checkbox({
        fieldLabel:$.su.CHAR.POLICY_ROUTE.STATUS,
        columns: 1,
        items:[
            {boxlabel: "启用", name:'enable', inputValue:'on', uncheckedValue: "off", checked:true}
        ]
    });

	var l2tpServerListProxy = new $.su.Proxy();

	var l2tpClientGrid = $("#l2tp-client-grid").grid({
        maxRulesProperty: "client_list_max",
        editor: {

            validator:function()
            {
                var editor  = $(l2tpClientGrid.grid("getEditor"));
                var store 	= l2tpClientGrid.grid("getStore");
                var grid_array  = store.data;
                var editingId = editor.editor("getEditingId");
                var keyProperty = store.keyProperty;
                var tunnelName = editor.find(".text-text[name=tunnelname]").textbox("getValue");
                var ruleName = editor.find(".text-text[name=username]").textbox("getValue");
                var remoteSubnet  = editor.find("[name=remotesubnet]").subnet("getValue");
                var outifx = editor.find("#outif").combobox("getValue")
                var lnsx = editor.find(".text-text[name=server_ip]").textbox("getValue");
                var otherVPNInterface = [];
                var phyInterface = [];
                var TUNNEL_NAME_BAN_LIST = [
                    "VPN",
                    "NORMAL",
                    "SETTING",
                    "LOOPBACK",
                    "LOCAL",
                    "MAIN",
                    "DEFAULT",
                    "UNSPEC",
                    "GE1","GE2","GE3","GE4","GE5",
                    "GLOBAL",
                    "ONLINE_CHECK",
					"RESERVED",
					"VALUES"
                ];
                var isBaned = false;
                var isModified = false;
                if("add" == editingId){
                    isModified = true;
                }else{
                    $(grid_array).each(function(i, obj){

                        if(obj.key == editingId){
                            if(obj.tunnelname != tunnelName){
                                isModified = true;
                                return false;
                            }
                        }
                    });
                }

                $(TUNNEL_NAME_BAN_LIST).each(function(i, obj){
                    if(obj == tunnelName.toUpperCase()){
                        isBaned = true;
                        return false;
                    }
                });

                if (isBaned && isModified)
                {
                    //$($("div#l2tp-client-grid").grid("getEditor")).form('setError', "隧道名称" + tunnelName + "被系统保留，禁止使用！");
                    editor.find(".text-text[name=tunnelname]").textbox("setError", "隧道名称" + tunnelName + "被系统保留，请更换后重试！");
                    return false;
                }

                /* get the vpn interface and the normal interface from the proxy */
                var interfaceProxy = new $.su.Proxy({});
                interfaceProxy.query({"network":{"table": "if"}}, function(data){
                    data = data.network["if"];
                    for (var i = 0; i < data.length; i++)
                    {
                        for (var key in data[i])
                        {
                            if (data[i][key].if_type=="physical")
                                phyInterface.push({name:data[i][key].if_name,value:data[i][key].if_name});
                            else if (key.if_type=="vpn")
                                otherVPNInterface.push({name:data[i][key].if_name,value:data[i][key].if_name});
                       }
                    }
                });

                /* check the grid, the username and the tunnelname can't be repeated */
                if(($.isArray(grid_array)) && (grid_array.length > 0))
                {
                    for(var index = 0; index < grid_array.length; index ++)
                    {
                        var data = grid_array[index];
                        /* remove the tunnelnames which are in the grid from the vpn interface */
                        var interfaceIndex = otherVPNInterface.indexOf(data["tunnelname"]);
                        if(-1 != interfaceIndex)
                        {
                            otherVPNInterface.splice(interfaceIndex,1);
                        }
                        if(data[keyProperty] == editingId)
                        {
                            continue;
                        }
                        else if(/*(data["username"] == ruleName)||*/(data["tunnelname"] == tunnelName ))
                        {
                            $($("div#l2tp-client-grid").grid("getEditor")).form('setError', "隧道名称不能重复！");
                            return false;
                        }
                        else if((data["outif"] == outifx && data["lns"] == lnsx ))
                        {
                            $($("div#l2tp-client-grid").grid("getEditor")).form('setError', "出接口和服务器地址不能同时与其他L2TP客户端相同！");
                            return false;
                        }
                    }
                }

                /* the interface can't be repeated with l2tp interface */
                var interfaceLen = otherVPNInterface.length;
                if(0 != interfaceLen)
                {
                    for(var index = 0; index < interfaceLen; index ++)
                    {
                        if(otherVPNInterface[index] == tunnelName)
                        {
                            $($("div#l2tp-client-grid").grid("getEditor")).form('setError', "与PPTP客户端隧道名称不能重复！");
                            return false;
                        }
                    }
                }

                /* the interface can't be repeated with phy interface */
                interfaceLen = phyInterface.length;
                if(0 != interfaceLen)
                {
                    for(var index = 0; index < interfaceLen; index ++)
                    {
                        if(phyInterface[index] == tunnelName)
                        {
                            $($("div#l2tp-client-grid").grid("getEditor")).form('setError', "与物理接口名称不能重复！");
                            return false;
                        }
                    }
                }

                /* check and set the value of the remotesubnet */
                var ipArray = remoteSubnet.split('/');
                var ipAddr	= ipArray[0];
                var mask    = ipArray[1];
                var newIntIP = logicAnd($.su.func.ipToInt(ipAddr),$.su.func.ipToInt(maskIntToMaskAddr(mask)));
                var newNetIP  = $.su.func.intToIp(newIntIP);
                var newRemoteSubnet   = newNetIP + '/' + mask;
                editor.find("[name=remotesubnet]").subnet("setValue",newRemoteSubnet);

                return true;
            },
            content:"#own_editor",
            fields: [
                {name: "tunnelname"},
                {name: "username"},
                {name: "password"},
                {name: "server_ip"},
                {name: "outif"},
                {name: "ipsecenc"},
                {name: "presharekey"},
                {name: "workmode"},
                {name: "remotesubnet"},
                {name: "uplink_bandwidth"},
                {name: "downlink_bandwidth"},
                {name: "enable"}
            ]
        },
		store:{
			proxy: l2tpServerListProxy,
            extraProperty: "tunnelname",
			fields: [
                {name: "tunnelname"},
                {name: "username"},
                {name: "password"},
                {name: "server_ip"},
                {name: "outif"},
                {name: "ipsecenc"},
                {name: "presharekey"},
                {name: "workmode"},
                {name: "remotesubnet"},
                {name: "uplink_bandwidth"},
                {name: "downlink_bandwidth"},
                {name: "enable"}
			],
			parseKey: {
				moduleName:"vpn",
                pageSizeName:"l2tp_client_entry",
				tableName:"lac"
			},
			autoLoad: true
		},
        paging_true: {},
		columns: [
			{
				xtype: "checkcolumn"
			},
			{
				xtype: "rownumberer"
			},
            {
                text: $.su.CHAR.L2TP_CLIENT.TUNNELNAME,
                width: 100,
                dataIndex: "tunnelname"
            },
            {
                text: $.su.CHAR.L2TP_CLIENT.USERNAME,
                width: 100,
                dataIndex: "username"
            },
            {
                text: $.su.CHAR.L2TP_CLIENT.PASSWORD,
                width: $.su.CHAR.SETTING.L2TP_CLIENT.PASSWORD_WIDTH,
                dataIndex: "password",
                hidden: true
            },
			{
                text: $.su.CHAR.L2TP_CLIENT.OUTIF,
                width: 80,
                dataIndex: "outif"
			},
            {
                text: $.su.CHAR.L2TP_CLIENT.LNS,
                width: 120,
                dataIndex: "server_ip"
            },
            {
                text: $.su.CHAR.L2TP_CLIENT.IPSEC_ENC,
                width: 60,
                dataIndex: "ipsecenc",
                renderer: function(v){
                    if (v=="yes"){
                        return $.su.CHAR.L2TP_CLIENT.IPSEC_ENC_YES;
                    }else if(v == "no"){
                        return $.su.CHAR.L2TP_CLIENT.IPSEC_ENC_NO;
                    }else if(v == "auto"){
                        return $.su.CHAR.L2TP_CLIENT.IPSEC_ENC_AUTO;
                    }else{
                        return "--";
                    }
                }
            },
            {
                text: $.su.CHAR.L2TP_CLIENT.PRESHARE_KEY,
                width: $.su.CHAR.SETTING.L2TP_CLIENT.PRESHARE_KEY_WIDTH,
                dataIndex: "presharekey",
                hidden: true
            },
            {
                text: $.su.CHAR.L2TP_CLIENT.REMOTE_SUBNET,
                width: 120,
                dataIndex: "remotesubnet"
            },
            {
                text: $.su.CHAR.L2TP_CLIENT.WORK_MODE,
                width: 60,
                dataIndex: "workmode",
                renderer: function(v){
                    if (v=="nat"){
                        return $.su.CHAR.L2TP_CLIENT.WORK_MODE_NAT;
                    }else if(v == "route"){
                        return $.su.CHAR.L2TP_CLIENT.WORK_MODE_ROUTE;
                    }else{
                        return "--";
                    }
                }
            },
            {
                xtype: "statuscolumn",
                dataIndex: "enable"
            },
            {
                xtype: "settings"
            }
		],
		operation: 'prompt|add|delete'
	}).on("ev_load", function(e,data, others){
        /*发送form请求,获取interface列表.用于显示于outif下拉框*/
        if(others && others.client_list_max)
        {
            maxrules = others.client_list_max;
        }

        if (firstload) {
            var data = $l2tpStore.data
            for (var i = 0; i < data.length; i++)
            {
                l2tpinterface.push(data[i].tunnelname);
            }
            var interfaceProxy = new $.su.Proxy({});
            interfaceProxy.query({"network":{"table": "if"}}, function(data){
                data = data.network["if"];
                for (var i = 0; i < data.length; i++)
                {
                    for (var key in data[i])
                        if ((data[i][key].if_type != "vpn") &&　(data[i][key].if_name != "LAN") && (data[i][key].isbridged != 1))
                            interfaceItem.push({name:data[i][key].if_name,value:data[i][key].if_name});
                }

                var editor = l2tpClientGrid.grid('getEditor');
                var comboInterface = $(editor).find('.combobox-value[name=outif]');
                if(interfaceItem.length !== 0){
                    //debugger;
                    comboInterface.combobox('loadData',interfaceItem);
                }
            });
            firstload = false;
        }

    }).on("ev_startEdit",function(e,index,key){
            var editor  = $(l2tpClientGrid.grid("getEditor"));
            var ipsecenc = editor.find("[name=ipsecenc]").combobox("getValue");
            var comboInterface = $(editor).find('.combobox-value[name=outif]');
            if("no" == ipsecenc )
            {
                $.su.func.hideWidgets($('#presharekey'));
            }else if("yes" == ipsecenc)
            {
                $.su.func.showWidgets($('#presharekey'));
            }

            if (index == 'add') {
                editor.find(".text-text[name=tunnelname]").textbox("enableStyle");
                editor.find('#password').password('setValue', '');
                /*if(interfaceItem.length !== 0) {
                    comboInterface.combobox('loadData',interfaceItem);
                }*/
            }
            else
            {
                editor.find(".text-text[name=tunnelname]").textbox("disableStyle");
                var data = $l2tpStore.data;
                var keyProperty = $l2tpStore.keyProperty;
                var delitem = false;

                for (var i = 0; i < data.length; i++)
                {
                    if (data[i][keyProperty] == key)
                    {
                        delitem = data[i].tunnelname;
                        break;
                    }

                }
                var interfaceItemx = [];
                for (var i = 0; i < interfaceItem.length; i++)
                {
                    if (delitem != interfaceItem[i].name)
                        interfaceItemx.push(interfaceItem[i]);
                }
                var bindif = comboInterface.combobox('getValue');
                /*if(interfaceItemx.length !== 0) {
                    comboInterface.combobox('loadData',interfaceItemx);
                }*/
                comboInterface.combobox("setValue", bindif);
            }

    }).on("ev_insert", function(e, index, data){
        l2tpinterface.push(data[0].tunnelname);
        interfaceItem.push({name:data[0].tunnelname, value:data[0].tunnelname});
        var editor = l2tpClientGrid.grid('getEditor');
        var comboInterface = $(editor).find('.combobox-value[name=outif]');
        /*if(interfaceItem.length !== 0) {
            comboInterface.combobox('loadData',interfaceItem);
        }*/
        /*reloadGrid({});*/
    }).on("ev_remove", function(e, keys){
        var data = $l2tpStore.data;
        var keyProperty = $l2tpStore.keyProperty
        var delitem = {}
        var miditem = {}
        var l2tpinterfacex = [];

        for (var k = 0; k < data.length; k++) {
            miditem[data[k].tunnelname] = true;
            l2tpinterfacex.push(data[k].tunnelname)
        }
        for (var k = 0; k < l2tpinterface.length; k++)
        {
            if (miditem[l2tpinterface[k]] !== true)
                delitem[l2tpinterface[k]] = true;
        }
        l2tpinterface = l2tpinterfacex;
        var interfaceItemx = []
        for (var i = 0; i < interfaceItem.length; i++)
        {
            if (delitem[interfaceItem[i].name] != true)
                interfaceItemx.push(interfaceItem[i]);

        }

        interfaceItem = interfaceItemx;
        var editor = l2tpClientGrid.grid('getEditor');
        var comboInterface = $(editor).find('.combobox-value[name=outif]');
        /*if(interfaceItem.length !== 0) {
            comboInterface.combobox('loadData',interfaceItem);
        }*/
        $("#delete_alert_cnt").msg("close");
        $("#delete_pro_bar").waitingbar("stop");
        $("#delete_pro_bar").waitingbar("reset");
    }).on("ev_startDelete",function(){
        var trList = l2tpClientGrid.find("tr.selected");
        if(trList.length >= 3){
            $("#delete_alert_cnt").msg("show");
            $("#delete_pro_bar").waitingbar("run");
            //del_check();
        }
    }).on("ev_deleteError",function(){
        $("#delete_alert_cnt").msg("close");
        $("#delete_pro_bar").waitingbar("stop");
        $("#delete_pro_bar").waitingbar("reset");
    });



    var $l2tpStore = l2tpClientGrid.grid('getStore');
    var $l2tpEditor = $(l2tpClientGrid.grid('getEditor'));


    $("#delete_alert_cnt").msg({
        cls: 'warning reboot-confirm-size',
        type: "confirm",
        closeBtn: false,
        okHandler:function(){},
        cancelHandler:function(){}
    });


    $("#delete_alert_cnt").msg("hideButtons");

    $("#delete_pro_bar").waitingbar({
        fieldLabel:"删除多条L2TP设置可能需要一些时间，请您耐心等待",
        labelCls:"xxxl"
    });



    var helpL2tpClientGrid = new $.su.Help({
        container: "div#l2tp-client-help",
        content: ["L2TP_CLIENT_GLOBAL", "L2TP_CLIENT_SET"]
    }); /* TODO */

});
</script>
</body>

</html>