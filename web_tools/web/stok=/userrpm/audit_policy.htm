<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>AuditPolicy</title>
<style type="text/css">
</style>
</head>

<body>
<div class="func-container">
	<div id="audit_policy_inner_list">
		<div id="audit_policy_grid">
		</div>
	</div>

	<div id="own_editor">
		<input id="rule_name" name="name" />
		<input id="description" name="comment" />
		<input id="src_zone" name="src_zone" />
		<input id="dst_zone" name="dst_zone" />
		<input id="src_ipgroup" name="src_ipgroup" />
		<input id="dst_ipgroup" name="dst_ipgroup" />
        <input id="user_group" name="user_group" />
		<input id="service_group" name="service_group" />
		<input id="time" name="time" />
		<input id="action" name="action" />
		<input id="audit_profile" name="audit_profile" />
		<input id="enable" name="enable" />
	</div>
	<div id="audit_policy_help">
	</div>
</div>

<script type="text/javascript">
try{
	$
}catch(e){
	location.href = "/";
};

$(document).ready(function(e){
	$(".func-container").hide();
	var zoneMap=[];
	var zoneItem=[];
	var zoneItemSearch=[];
	var ipgroupMap=[];
	var ipgroupItem=[];
    var userGroupMap=[];
	var userGroupItem=[];
	var serviceGroupMap=[];
	var serviceGroupItem=[];
	var timeObjMap=[];
	var timeObjItem=[];
	var auditProfileMap=[];
	var auditProfileItem=[];
	var itemProxy = new $.su.Proxy({async: false});
	itemProxy.query({"zone":{"table":"zone"}, "ipgroup":{"table":"rule_ipgroup"}, "usergroup":{"table":"rule_group"},
	"service":{"table":"service_group"}, "time_mngt":{"table":"time_obj"}, "audit_profile":{"table":"audit_profile"}}, function(data){
		zoneItem.push({name:"Any",value:""});
		zoneItemSearch.push({name:"Any",value:"---"});
		for (var i=0; i<data.zone.zone.length; i++)
			for (var j in data.zone.zone[i])
			{
				zoneMap[j] = data.zone.zone[i][j].name;
				zoneItem.push({name:data.zone.zone[i][j].name,value:j});
				zoneItemSearch.push({name:data.zone.zone[i][j].name,value:j});
				break;
			}

		for (var i=0; i<data.ipgroup.rule_ipgroup.length; i++)
			for (var j in data.ipgroup.rule_ipgroup[i])
			{
				var displayName = ipgroupDisplayNameGet(data.ipgroup.rule_ipgroup[i][j]); //see bug314173
				ipgroupMap[j] = displayName;
				if (data.ipgroup.rule_ipgroup[i][j].name == "IPGROUP_ANY"){
					ipgroupItem.push({name:displayName,value:j,selected:true});
				}else{
					ipgroupItem.push({name:displayName,value:j});
					ipgroupMap["!"+j] = "! "+displayName;
					ipgroupItem.push({name:"! "+displayName,value:"!"+j});
				}
				break;
			}
        for (var i=0; i<data.usergroup.rule_group.length; i++)
			for (var j in data.usergroup.rule_group[i])
			{
				userGroupMap[j] = data.usergroup.rule_group[i][j].name;
				if (data.usergroup.rule_group[i][j].name == "Any")userGroupItem.push({name:data.usergroup.rule_group[i][j].name,value:"any",selected:true});
				else userGroupItem.push({name:data.usergroup.rule_group[i][j].name,value:j});
				break;
			}
		for (var i=0; i<data.service.service_group.length; i++)
			for (var j in data.service.service_group[i])
			{
				serviceGroupMap[j] = data.service.service_group[i][j].name;
				if (data.service.service_group[i][j].name == "Any")serviceGroupItem.push({name:data.service.service_group[i][j].name,value:j,selected:true});
				else serviceGroupItem.push({name:data.service.service_group[i][j].name,value:j});
				break;
			}
		for (var i=0; i<data.time_mngt.time_obj.length; i++)
			for (var j in data.time_mngt.time_obj[i])
			{
				timeObjMap[j] = data.time_mngt.time_obj[i][j].name;
				if (data.time_mngt.time_obj[i][j].name == "Any")timeObjItem.push({name:data.time_mngt.time_obj[i][j].name,value:j,selected:true});
				else timeObjItem.push({name:data.time_mngt.time_obj[i][j].name,value:j});
				break;
			}
		for (var i=0; i<data.audit_profile.audit_profile.length; i++)
			for (var j in data.audit_profile.audit_profile[i])
			{
				auditProfileMap[j] = data.audit_profile.audit_profile[i][j].name;
				auditProfileItem.push({name:data.audit_profile.audit_profile[i][j].name,value:j});
				break;
			}
	});

	var audit_policy_proxy = new $.su.Proxy();
	var maxrules;
	var defaultRulesCnt = 0;

	$("#audit_policy_inner_list").panel({
		title: $.su.CHAR.AUDIT_POLICY.RULE_LIST,
		collapsible: false
	});

	$("#rule_name").textbox({
		fieldLabel:$.su.CHAR.AUDIT_POLICY.NAME,
		tips:"(1-28个字符)",
		allowBlank:false,
		maxLength:28,
		vtype:"name"
	});

	$("#description").textbox({
		fieldLabel:$.su.CHAR.AUDIT_POLICY.DESC,
		tips:"(1-50个字符)",
		allowBlank:true,
		maxLength:50,
		vtype:"string_visible_allow_blank"
	});

	$("#src_zone").combobox({
		fieldLabel:$.su.CHAR.AUDIT_POLICY.SRC_ZONE,
		tips:$.su.CHAR.AUDIT_POLICY.TIPS_OPTION,
		items:zoneItem
	});

	$("#dst_zone").combobox({
		fieldLabel:$.su.CHAR.AUDIT_POLICY.DST_ZONE,
		tips:$.su.CHAR.AUDIT_POLICY.TIPS_OPTION,
		items:zoneItem
	});

	$("#audit_profile").combobox({
		fieldLabel:$.su.CHAR.AUDIT_POLICY.AUDIT_PROFILE,
		allowBlank:false,
		items:auditProfileItem
	});

	$("#action").radio({
		fieldLabel:$.su.CHAR.AUDIT_POLICY.ACTION,
		columns:2,
		items:[
			{boxlabel:$.su.CHAR.AUDIT_POLICY.AUDIT,name:"action",inputValue:'custom',checked:true},
			{boxlabel:$.su.CHAR.AUDIT_POLICY.NOAUDIT,name:"action",inputValue:'return'}
		]
	}).on("ev_change", function(e, oldValue, newValue) {
		if(newValue === 'custom'){
			$('#audit_profile').combobox('enableStyle');
		}else{
			$('#audit_profile').combobox('disableStyle');
		}
	});

	/*should dymically add here*/
    $("#user_group").combobox({
		fieldLabel:$.su.CHAR.SEC_POLICY.USER_GROUP,
		items:userGroupItem,
		allowBlank:false
	});

	$("#service_group").combobox({
		fieldLabel:$.su.CHAR.AUDIT_POLICY.SERVICE,
		items:serviceGroupItem,
		allowBlank:false
	});

	$("#src_ipgroup").combobox({
		fieldLabel:$.su.CHAR.AUDIT_POLICY.SRC_IPGROUP,
		allowBlank:false,
		items:ipgroupItem
	});

	$("#dst_ipgroup").combobox({
		fieldLabel:$.su.CHAR.AUDIT_POLICY.DST_IPGROUP,
		items:ipgroupItem,
		allowBlank:false
	});

	$("#time").combobox({
		fieldLabel:$.su.CHAR.AUDIT_POLICY.TIME,
		items:timeObjItem,
		allowBlank:false
	});

	$("input#enable").checkbox({
		fieldLabel:$.su.CHAR.AUDIT_PROFILE.STATUS,
		columns:1,
		items:[
		{
			boxlabel:$.su.CHAR.AUDIT_PROFILE.ENABLE,inputValue:'on',uncheckedValue:"off",checked:true
			}]
	});

	function renderer_to_name(data, map){
		if (typeof(data) == "undefined" || data == "---") return "---";
		if (typeof(data) == "string") data = [data];

		//把value转换为name
		var namelist=[];
		data.forEach(function(item,index){
			namelist[index]=map[item];
		});
		return namelist;
	}

	var ruleGrid = $("#audit_policy_grid").grid({
		orderSensitive: "insert_index",
		editor:{
			content:"#own_editor",
			fields:[
				{name: "name"},
				{name: "comment"},
				{name: "src_zone"},
				{name: "dst_zone"},
				{name: "src_ipgroup"},
				{name: "dst_ipgroup"},
                {name: "user_group"},
				{name: "service_group"},
				{name: "time"},
				{name: "action"},
				{name: "audit_profile"},
				{name: "flag"},
				{name:"enable"}
			],
			validator:function(){
				var name=$("#rule_name").textbox('getValue');
				var nameList = $("#audit_policy_grid").grid('getStore').data;
				var editingId = $($("#audit_policy_grid").grid('getEditor')).editor("getEditingId");
				var modify_flag = 0;
				for(var i=0;i<nameList.length;i++){
					if(editingId == nameList[i].key){
						modify_flag = 1;
						continue;
					}
					if(name == nameList[i].name){
						$($("#audit_policy_grid").grid("getEditor")).form('setError',"您输入的名称已经存在，请重新输入");
						return false;
					}
				}
				return true;
			}
		},
		store:{
			proxy:audit_policy_proxy,
			fields:[
				{name: "name"},
				{name: "comment"},
				{name: "src_zone"},
				{name: "dst_zone"},
				{name: "src_ipgroup"},
				{name: "dst_ipgroup"},
                {name: "user_group"},
				{name: "service_group"},
				{name: "time"},
				{name: "action"},		//accept\drop\return\custom
				{name: "audit_profile"},
				{name: "flag"},
				{name:"enable"}
			],
			parseKey:{
				moduleName: "audit_policy",
				tableName: "audit_policy",
				pageSizeName: "audit_policy_entry"
			},
			autoLoad:true
		},
		paging_true:[],
		columns:[
			 {
				xtype: "checkcolumn",
				width: 32
			},
			{
				xtype: "rownumberer",
				width: 30
			},
			{
				text:$.su.CHAR.AUDIT_POLICY.NAME,
				width:60,
				dataIndex:"name",
				scan: {
					cmp: $.search.compare.string,
					vtype: "string"
				}
			},
			{
				text:$.su.CHAR.AUDIT_POLICY.DESC,
				width:60,
				dataIndex:"comment",
				scan: {
					cmp: $.search.compare.string,
					vtype: "string"
				}
			},
			{
				text:$.su.CHAR.AUDIT_POLICY.SRC_ZONE,
				width:60,
				dataIndex:"src_zone",
				renderer:function(data){
					if (typeof(data) == "undefined" || data == "---")
					{
						return "Any";
					}
					else
					{
						return renderer_to_name(data, zoneMap)
					}
				},
				scan: {
					type: "combobox",
					cmp: $.search.compare.stringStrict,
					items: zoneItemSearch
				}
			},
			{
				text:$.su.CHAR.AUDIT_POLICY.DST_ZONE,
				width:60,
				dataIndex:"dst_zone",
				renderer:function(data){
					if (typeof(data) == "undefined" || data == "---")
					{
						return "Any";
					}
					else
					{
						return renderer_to_name(data, zoneMap)
					}
				},
				scan: {
					type: "combobox",
					cmp: $.search.compare.stringStrict,
					items: zoneItemSearch
				}
			},
			{
				text:$.su.CHAR.AUDIT_POLICY.SRC_IPGROUP,
				width:80,
				dataIndex:"src_ipgroup",
				renderer:function(data){
					return renderer_to_name(data, ipgroupMap) || data;
				},
				scan: {
					type: "combobox",
					cmp: $.search.compare.stringStrict,
					items: ipgroupItem
				}
			},
			{
				text:$.su.CHAR.AUDIT_POLICY.DST_IPGROUP,
				width:80,
				dataIndex:"dst_ipgroup",
				renderer:function(data){
					return renderer_to_name(data, ipgroupMap) || data;
				},
				scan: {
					type: "combobox",
					cmp: $.search.compare.stringStrict,
					items: ipgroupItem
				}
			},
            {
				text:$.su.CHAR.SEC_POLICY.USER_GROUP,
				width:60,
				dataIndex:"user_group",
				renderer:function(data){
					return renderer_to_name(data, userGroupMap)
				},
				scan: {
					type: "combobox",
					cmp: $.search.compare.stringStrict,
					items: userGroupItem
				}
			},
			{
				text:$.su.CHAR.AUDIT_POLICY.SERVICE,
				width:60,
				dataIndex:"service_group",
				renderer:function(data){
					return renderer_to_name(data, serviceGroupMap)
				},
				scan: {
					type: "combobox",
					cmp: $.search.compare.stringStrict,
					items: serviceGroupItem
				}
			},
			{
				text:$.su.CHAR.AUDIT_POLICY.TIME,
				width:60,
				dataIndex:"time",
				renderer:function(data){
					return renderer_to_name(data, timeObjMap)
				},
				scan: {
					type: "combobox",
					cmp: $.search.compare.stringStrict,
					items: timeObjItem
				}
			},
			{
				text:$.su.CHAR.AUDIT_POLICY.ACTION,
				width:60,
				dataIndex:"action",
				renderer:function(data){
					if (data == "return") return $.su.CHAR.AUDIT_POLICY.NOAUDIT;
					else return $.su.CHAR.AUDIT_POLICY.AUDIT;
				},
				scan: {
					type: "combobox",
					cmp: $.search.compare.stringStrict,
					items: [
						{name:$.su.CHAR.AUDIT_POLICY.AUDIT,value:'custom'},
						{name:$.su.CHAR.AUDIT_POLICY.NOAUDIT,value:'return'}
					]
				}
			},
			{
				text:$.su.CHAR.AUDIT_POLICY.AUDIT_PROFILE,
				width:80,
				dataIndex:"audit_profile",
				renderer:function(data, index, all_data){
					if (all_data.action == "return") return "---";
					return renderer_to_name(data, auditProfileMap)
				},
				scan: {
					cmp: $.search.compare.string,
					vtype: "string"
				}
			},
			{
				text: $.su.CHAR.AUDIT_POLICY.STATUS,
				xtype: "statuscolumn",
				width: 50,
				dataIndex: "enable",
				hidden: false
			},
			{
				xtype: "settings",
				width: $.su.CHAR.SETTING.IMB.SETTING_WIDTH
			}
		],
		operation: 'prompt|add|delete|search'
	}).on("ev_load", function(e,data, others){
		for (var i = 0; i < data.length; i++){
			if (data[i].flag == "system"){
				$(ruleGrid).grid('disableRow',i);
			}
		}
	}).on("ev_insert",function(){
		ruleGrid.grid("getStore").load();
	}).on("ev_remove", function(){
		ruleGrid.grid("getStore").load();
	}).on("ev_update", function(){
		 ruleGrid.grid("getStore").load();
	});

	var aclEditor = $($(audit_policy_grid).grid("getEditor"));

	aclEditor.on("ev_startEdit", function(e, index, key){
		if (index != "add")
		{
			var action=$("#action").textbox('getValue');
			if (action == "return") $('#audit_profile').combobox('disableStyle');
			$("#rule_name").textbox("disableStyle");
		}
		else
		{
			$("#rule_name").textbox("enableStyle");
		}
		$('.insert_index').textbox('setValue', '');
	});
	function ipgroupDisplayNameGet(ipgroup_obj) {
		if (ipgroup_obj.flag == "system" && typeof(ipgroup_obj.comment) == "string" && ipgroup_obj.comment.length > 1) {
			return ipgroup_obj.comment;
		} else {
			return ipgroup_obj.name;
		}
	}

	 var acl_help = new $.su.Help({
		container: "div#audit_policy_help",
		content: ["AUDITPOLICY"] });

	$(".func-container").show();
});
</script>
</body>
</html>
